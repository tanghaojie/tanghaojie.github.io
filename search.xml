<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>git commit规范化，设置Commitizen，符合Angular的规范</title>
      <link href="/2020/05/15/git-commitizen/"/>
      <url>/2020/05/15/git-commitizen/</url>
      
        <content type="html"><![CDATA[<h2 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h2><p><a href="https://github.com/commitizen/cz-cli" target="_blank" rel="noopener">commitizen地址</a><br><a href="https://github.com/commitizen/cz-conventional-changelog" target="_blank" rel="noopener">cz-conventional-changelo地址：规范要求，不同的适配器要求不同</a><br><a href="https://github.com/ajoslin/conventional-changelog" target="_blank" rel="noopener">conventional-changelog地址：生成changelog.md</a></p><pre><code>npm install -g commitizennpm install -g cz-conventional-changelognpm install -g conventional-changelog-clicommitizen init cz-conventional-changelog --save-dev --save-exact</code></pre><p>如果已经有其他适配器了，会报错，用  <code>--force</code> 替换掉，即：</p><pre><code>commitizen init cz-conventional-changelog --save-dev --save-exact --force</code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>以后提交代码就用<code>git cz -m</code>替代<code>git commit -m</code>就好了，或者不输入message跟着提示走就没问题。<br>type值：  </p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>feat</td><td>新增一个功能</td></tr><tr><td>fix</td><td>修复一个Bug</td></tr><tr><td>docs</td><td>文档变更</td></tr><tr><td>style</td><td>代码格式（不影响功能，例如空格、分号等格式修正）</td></tr><tr><td>refactor</td><td>代码重构</td></tr><tr><td>perf</td><td>改善性能</td></tr><tr><td>test</td><td>测试</td></tr><tr><td>build</td><td>变更项目构建或外部依赖（例如scopes: webpack、gulp、npm等）</td></tr><tr><td>ci</td><td>更改持续集成软件的配置文件和package中的scripts命令，例如scopes: Travis, Circle等</td></tr><tr><td>chore</td><td>变更构建流程或辅助工具</td></tr><tr><td>revert</td><td>代码回退</td></tr></tbody></table><p>生成changelog：<br><code>conventional-changelog -p angular -i CHANGELOG.md -s</code></p><hr><p><em>版权声明：</em><br><em>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</em></p><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker速查表</title>
      <link href="/2020/05/15/docker-cheat-sheet/"/>
      <url>/2020/05/15/docker-cheat-sheet/</url>
      
        <content type="html"><![CDATA[<h2 id="容器（Container）"><a href="#容器（Container）" class="headerlink" title="容器（Container）"></a>容器（Container）</h2><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><ul><li><a href="https://docs.docker.com/engine/reference/commandline/create" target="_blank" rel="noopener"><code>docker create</code></a> 创建容器但不启动它。</li><li><a href="https://docs.docker.com/engine/reference/commandline/rename/" target="_blank" rel="noopener"><code>docker rename</code></a> 用于重命名容器。</li><li><a href="https://docs.docker.com/engine/reference/commandline/run" target="_blank" rel="noopener"><code>docker run</code></a> 一键创建并同时启动该容器。</li><li><a href="https://docs.docker.com/engine/reference/commandline/rm" target="_blank" rel="noopener"><code>docker rm</code></a> 删除容器。</li><li><a href="https://docs.docker.com/engine/reference/commandline/update/" target="_blank" rel="noopener"><code>docker update</code></a> 调整容器的资源限制。</li></ul><h4 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h4><p><code>docker run --rm</code> 临时容器，容器停止之后删除它。<br><code>docker run -d container_id</code>，<code>-d</code> 表示自动将容器与终端分离（也就是说在后台运行容器，并输出容器 ID）<br><code>docker run -p container_id</code>，<code>-p</code> 表示指定端口映射，格式：主机（宿主）端口:容器端口</p><h3 id="启动和停止"><a href="#启动和停止" class="headerlink" title="启动和停止"></a>启动和停止</h3><ul><li><a href="https://docs.docker.com/engine/reference/commandline/start" target="_blank" rel="noopener"><code>docker start</code></a> 启动已存在的容器。</li><li><a href="https://docs.docker.com/engine/reference/commandline/stop" target="_blank" rel="noopener"><code>docker stop</code></a> 停止运行中的容器。</li><li><a href="https://docs.docker.com/engine/reference/commandline/restart" target="_blank" rel="noopener"><code>docker restart</code></a> 重启容器。</li><li><a href="https://docs.docker.com/engine/reference/commandline/pause/" target="_blank" rel="noopener"><code>docker pause</code></a> 暂停运行中的容器，将其「冻结」在当前状态。</li><li><a href="https://docs.docker.com/engine/reference/commandline/unpause/" target="_blank" rel="noopener"><code>docker unpause</code></a> 结束容器暂停状态。</li><li><a href="https://docs.docker.com/engine/reference/commandline/wait" target="_blank" rel="noopener"><code>docker wait</code></a> 阻塞地等待某个运行中的容器直到停止。</li><li><a href="https://docs.docker.com/engine/reference/commandline/kill" target="_blank" rel="noopener"><code>docker kill</code></a> 向运行中的容器发送 SIGKILL 指令。</li><li><a href="https://docs.docker.com/engine/reference/commandline/attach" target="_blank" rel="noopener"><code>docker attach</code></a> 连接到运行中的容器。</li></ul><h3 id="信息"><a href="#信息" class="headerlink" title="信息"></a>信息</h3><ul><li><a href="https://docs.docker.com/engine/reference/commandline/ps" target="_blank" rel="noopener"><code>docker ps</code></a> 查看运行中的所有容器。</li><li><a href="https://docs.docker.com/engine/reference/commandline/logs" target="_blank" rel="noopener"><code>docker logs</code></a> 从容器中读取日志。（你也可以使用自定义日志驱动，不过在 1.10 中，它只支持 <code>json-file</code> 和 <code>journald</code>）。</li><li><a href="https://docs.docker.com/engine/reference/commandline/inspect" target="_blank" rel="noopener"><code>docker inspect</code></a> 查看某个容器的所有信息（包括 IP 地址）。</li><li><a href="https://docs.docker.com/engine/reference/commandline/events" target="_blank" rel="noopener"><code>docker events</code></a> 从容器中获取事件 (events)。</li><li><a href="https://docs.docker.com/engine/reference/commandline/port" target="_blank" rel="noopener"><code>docker port</code></a> 查看容器的公开端口。</li><li><a href="https://docs.docker.com/engine/reference/commandline/top" target="_blank" rel="noopener"><code>docker top</code></a> 查看容器中活动进程。</li><li><a href="https://docs.docker.com/engine/reference/commandline/stats" target="_blank" rel="noopener"><code>docker stats</code></a> 查看容器的资源使用量统计信息。</li><li><a href="https://docs.docker.com/engine/reference/commandline/diff" target="_blank" rel="noopener"><code>docker diff</code></a> 查看容器文件系统中存在改动的文件。</li></ul><h4 id="常用参数-1"><a href="#常用参数-1" class="headerlink" title="常用参数"></a>常用参数</h4><p><code>docker ps -a</code> 显示所有容器，包括运行中和已停止的。<br><code>docker stats --all</code> 同样将显示所有容器，默认仅显示运行中的容器。</p><h3 id="导入-导出"><a href="#导入-导出" class="headerlink" title="导入 / 导出"></a>导入 / 导出</h3><ul><li><a href="https://docs.docker.com/engine/reference/commandline/cp" target="_blank" rel="noopener"><code>docker cp</code></a> 在容器和本地文件系统之间复制文件或目录。</li><li><a href="https://docs.docker.com/engine/reference/commandline/export" target="_blank" rel="noopener"><code>docker export</code></a> 将容器的文件系统打包为归档文件流 (tarball archive stream) 并输出至标准输出 (STDOUT)。</li></ul><h3 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h3><ul><li><a href="https://docs.docker.com/engine/reference/commandline/exec" target="_blank" rel="noopener"><code>docker exec</code></a> 在容器内执行命令。</li></ul><p>例如，进入正在运行的 <code>foo</code> 容器，并连接 (attach) 到一个新的 Shell 进程：<code>docker exec -it foo /bin/bash</code>。</p><h2 id="镜像-Images"><a href="#镜像-Images" class="headerlink" title="镜像(Images)"></a>镜像(Images)</h2><h3 id="生命周期-1"><a href="#生命周期-1" class="headerlink" title="生命周期"></a>生命周期</h3><ul><li><a href="https://docs.docker.com/engine/reference/commandline/images" target="_blank" rel="noopener"><code>docker images</code></a> 查看所有镜像。</li><li><a href="https://docs.docker.com/engine/reference/commandline/import" target="_blank" rel="noopener"><code>docker import</code></a> 从归档文件创建镜像。</li><li><a href="https://docs.docker.com/engine/reference/commandline/build" target="_blank" rel="noopener"><code>docker build</code></a> 从 Dockerfile 创建镜像。</li><li><a href="https://docs.docker.com/engine/reference/commandline/commit" target="_blank" rel="noopener"><code>docker commit</code></a> 为容器创建镜像，如果容器正在运行则会临时暂停。</li><li><a href="https://docs.docker.com/engine/reference/commandline/rmi" target="_blank" rel="noopener"><code>docker rmi</code></a> 删除镜像。</li><li><a href="https://docs.docker.com/engine/reference/commandline/load" target="_blank" rel="noopener"><code>docker load</code></a> 从标准输入 (STDIN) 加载归档包 (tar archive) 作为镜像，包括镜像本身和标签 (tags, 0.7 起)。</li><li><a href="https://docs.docker.com/engine/reference/commandline/save" target="_blank" rel="noopener"><code>docker save</code></a> 将镜像打包为归档包，并输出至标准输出 (STDOUT)，包括所有的父层、标签和版本 (parent layers, tags, versions, 0.7 起)。</li></ul><h3 id="其它信息"><a href="#其它信息" class="headerlink" title="其它信息"></a>其它信息</h3><ul><li><a href="https://docs.docker.com/engine/reference/commandline/history" target="_blank" rel="noopener"><code>docker history</code></a> 查看镜像的历史记录。</li><li><a href="https://docs.docker.com/engine/reference/commandline/tag" target="_blank" rel="noopener"><code>docker tag</code></a> 给镜像打标签命名（本地或者仓库均可）。</li></ul><h2 id="网络-Networks"><a href="#网络-Networks" class="headerlink" title="网络(Networks)"></a>网络(Networks)</h2><h3 id="生命周期-2"><a href="#生命周期-2" class="headerlink" title="生命周期"></a>生命周期</h3><ul><li><a href="https://docs.docker.com/engine/reference/commandline/network_create/" target="_blank" rel="noopener"><code>docker network create</code></a></li><li><a href="https://docs.docker.com/engine/reference/commandline/network_rm/" target="_blank" rel="noopener"><code>docker network rm</code></a></li></ul><h3 id="其它信息-1"><a href="#其它信息-1" class="headerlink" title="其它信息"></a>其它信息</h3><ul><li><a href="https://docs.docker.com/engine/reference/commandline/network_ls/" target="_blank" rel="noopener"><code>docker network ls</code></a></li><li><a href="https://docs.docker.com/engine/reference/commandline/network_inspect/" target="_blank" rel="noopener"><code>docker network inspect</code></a></li></ul><h3 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h3><ul><li><a href="https://docs.docker.com/engine/reference/commandline/network_connect/" target="_blank" rel="noopener"><code>docker network connect</code></a></li><li><a href="https://docs.docker.com/engine/reference/commandline/network_disconnect/" target="_blank" rel="noopener"><code>docker network disconnect</code></a></li></ul><h2 id="仓库-Repository"><a href="#仓库-Repository" class="headerlink" title="仓库(Repository)"></a>仓库(Repository)</h2><ul><li><a href="https://docs.docker.com/engine/reference/commandline/login" target="_blank" rel="noopener"><code>docker login</code></a> 登入仓管中心。</li><li><a href="https://docs.docker.com/engine/reference/commandline/logout" target="_blank" rel="noopener"><code>docker logout</code></a> 登出仓管中心。</li><li><a href="https://docs.docker.com/engine/reference/commandline/search" target="_blank" rel="noopener"><code>docker search</code></a> 从仓管中心检索镜像。</li><li><a href="https://docs.docker.com/engine/reference/commandline/pull" target="_blank" rel="noopener"><code>docker pull</code></a> 从仓管中心拉取镜像到本地。</li><li><a href="https://docs.docker.com/engine/reference/commandline/push" target="_blank" rel="noopener"><code>docker push</code></a> 从本地推送镜像到仓管中心。</li></ul><hr><p><em>版权声明：</em><br><em>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</em></p><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git速查表</title>
      <link href="/2020/05/14/git-cheat-sheet/"/>
      <url>/2020/05/14/git-cheat-sheet/</url>
      
        <content type="html"><![CDATA[<p>git 从远程拉取代码、推代码的步骤</p><p>如果是几个人共同管理项目，并且你的队友在你之前推过代码，那你就需要 git pull 一下，把代码拉到本地，解决一下冲突，再执行以下步骤，将本地代码推到远程仓库。</p><blockquote><p>git status            #git仓库状态</p></blockquote><blockquote><p>git add *             #更新的代码添加到暂存区</p></blockquote><blockquote><p>git commit -m “msg”   #将暂存区的更新提交到仓库区</p></blockquote><blockquote><p>git pull              #先git pull,拉取远程仓库所有分支更新并合并到本地</p></blockquote><blockquote><p>git push origin master    #将本地分支的更新全部推送到远程仓库</p></blockquote><blockquote><p>git reset –mixed [哈希码]    #回滚到这个哈希码，将本地归档区和缓冲区也进行回滚</p></blockquote><blockquote><p>git reset –hard [哈希码]     #使用强制还原这个哈希码</p></blockquote><blockquote><p>git reset –soft [哈希码]     #回滚到这个哈希码，只将本地归档区回滚</p></blockquote><blockquote><p>git revert [哈希码]           #只是针对这个哈希码版本进行删除回滚操作</p></blockquote><blockquote><p>git log               #查看日志</p></blockquote><blockquote><p>git reflog            #查看操作记录，能找到之前的操作记录和哈希码</p></blockquote><p>多分支开发</p><blockquote><p>git branch -v         #查看我们当前有哪些分支？</p></blockquote><blockquote><p>git branch [name]   #创建name分支</p></blockquote><blockquote><p>git checkout [name] #切换到name分支</p></blockquote><blockquote><p>git checkout -b [name]  #创建并切换到name分支</p></blockquote><blockquote><p>git merge [name] 将name分支合并到master分支</p></blockquote><p>查看远端</p><blockquote><p>git remove -v</p></blockquote><p>添加多个远端</p><blockquote><p>git remote set-url –add origin <a href="http://xxxxx/xxx/adsdsdsdcelery-demo.git" target="_blank" rel="noopener">http://xxxxx/xxx/adsdsdsdcelery-demo.git</a></p></blockquote><hr><p><em>版权声明：</em><br><em>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</em></p><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>几何算法延伸</title>
      <link href="/2020/05/10/spatial-calculate-extend/"/>
      <url>/2020/05/10/spatial-calculate-extend/</url>
      
        <content type="html"><![CDATA[<h3 id="线平行"><a href="#线平行" class="headerlink" title="线平行"></a>线平行</h3><p>$$<br>A_xB_y = A_yB_x<br>$$</p><p>$$<br>\frac{A_x}{A_y} = \frac{B_x}{B_y}<br>$$</p><p>$$<br>\frac{A_x}{A_y} = \frac{B_x}{B_y} = \frac{B_z}{B_z}<br>$$</p><h3 id="线垂直"><a href="#线垂直" class="headerlink" title="线垂直"></a>线垂直</h3><p>$$<br>A_xB_x + A_yB_y = 0<br>$$</p><p>$$<br>A_xB_x + A_yB_y + A_zB_z = 0<br>$$</p><h2 id="向量-vec-A-vec-B-夹角方向（叉乘）"><a href="#向量-vec-A-vec-B-夹角方向（叉乘）" class="headerlink" title="向量 $\vec A$ $\vec B$ 夹角方向（叉乘）"></a>向量 $\vec A$ $\vec B$ 夹角方向（<strong>叉乘</strong>）</h2><p>$\vec A$ $\times$ $\vec B$ &gt; 0 , $\vec A$在$\vec B$的顺时针方向。<br>$\vec A$ $\times$ $\vec B$ &lt; 0 , $\vec A$在$\vec B$的逆时针方向。<br>$\vec A$ $\times$ $\vec B$ = 0 , $\vec A$ $\vec B$共线。</p><h2 id="判断凸多边形"><a href="#判断凸多边形" class="headerlink" title="判断凸多边形"></a>判断凸多边形</h2><p>根据上面方向的性质，可以推论出来。<br>以多边形相邻两条边为向量进行叉积和，如果全部大于零则是凸多边形，如果全部为零则共线，否则就是凹多边形。</p><h2 id="计算任意多边形面积"><a href="#计算任意多边形面积" class="headerlink" title="计算任意多边形面积"></a>计算任意多边形面积</h2><h3 id="计算三角形面积"><a href="#计算三角形面积" class="headerlink" title="计算三角形面积"></a>计算三角形面积</h3><p><img src="https://gitee.com/Jackie_Tang/Jackie_Tang/raw/master/my_images/tri.jpg" alt="计算三角形面积"><br>根据上一篇几何基础，向量叉乘结果为带符号的平行四边形面积，那么三角形的面积为：<br>$$<br>Area = \frac{\vec {AB} \times \vec {AC}}{2}<br>$$<br>面积结果为带符号的值，正面积则ABC成左手系，负面积则ABC成右手系。 </p><h3 id="计算任意凹凸多边形面积"><a href="#计算任意凹凸多边形面积" class="headerlink" title="计算任意凹凸多边形面积"></a>计算任意凹凸多边形面积</h3><p><img src="https://gitee.com/Jackie_Tang/Jackie_Tang/raw/master/my_images/area.jpg" alt="计算任意多边形面积"><br>计算多边形面积就是把多边形切分为多个三角形计算就好了。<br>由于面积计算的结果是带符号的，因此，此结果对于凹凸多边形都是有效。<br>甚至可以选取多边形外的一个点，来构建三角形计算，也是同样有效的，像这样：<br><img src="https://gitee.com/Jackie_Tang/Jackie_Tang/raw/master/my_images/area2.jpg" alt="外部选点"><br>当然一般不会选择外部的点。  </p><h3 id="计算带孔多边形的面积"><a href="#计算带孔多边形的面积" class="headerlink" title="计算带孔多边形的面积"></a>计算带孔多边形的面积</h3><p><img src="https://gitee.com/Jackie_Tang/Jackie_Tang/raw/master/my_images/area3.jpg" alt="孔洞多边形"><br>当多边形存在“孔洞”时， 第一层孔洞的环序是与外环序一定是相反的，因此孔洞的面积和外环的面积结果也是相反的，直接相加即可。多层孔洞当然也是一样的道理。<br><strong>注意</strong>  </p><ol><li>环序是很重要的，同一层环进行面积计算的时候，要始终保持同一个方向的环序进行计算。  </li><li>不同文件格式要求的最外部环序是不一样的，因此不要认为外环总是和大部分情况一样是逆时针的。  </li></ol><p><em>扩展</em><br>1.ESRI shapefile：外层环序为顺时针。<br>2.<a href="http://www.opengeospatial.org/standards/sfs" target="_blank" rel="noopener">OGC规范</a>：此标准未定义多边形旋转；实际的多边形旋转可以沿顺时针或逆时针方向进行。<br>3.<a href="https://docs.oracle.com/cd/B10501_01/appdev.920/a96630/sdo_objgeom.htm#BGHFDDBF" target="_blank" rel="noopener">Oracle</a>：Exterior ring boundaries must be oriented counterclockwise, and interior ring boundaries must be oriented clockwise.（外部环边界必须逆时针定向，而内部环边界必须顺时针定向。）<br>4.<a href="https://docs.microsoft.com/en-us/archive/blogs/edkatibah/working-with-invalid-data-and-the-sql-server-2008-geography-data-type-part-1b" target="_blank" rel="noopener">SQL Server</a>： If SQL Server finds outer rings oriented in a clockwise direction, it will re-orient such rings to counter-clockwise - the direction required for outer rings in the Geography data type. The same goes for inner rings (holes), which SQL Server will orient to clockwise.（如果SQL Server找到沿顺时针方向定向的外环，则它将重新定位此类环为逆时针方向-Geography数据类型中外环所需的方向。内环（孔）也是如此，SQL Server会将其定位为顺时针方向。）<br>5.<a href="https://postgis.net/docs/ST_ForceRHR.html" target="_blank" rel="noopener">PostGIS</a>：Forces the orientation of the vertices in a polygon to follow a Right-Hand-Rule, in which the area that is bounded by the polygon is to the right of the boundary. In particular, the exterior ring is orientated in a clockwise direction and the interior rings in a counter-clockwise direction.（强制多边形中顶点的方向遵循“右手规则”，其中多边形所包围的区域在边界的右边。特别地，外环沿顺时针方向定向，而内环沿逆时针方向定向。）</p><h2 id="判断多边形的环序"><a href="#判断多边形的环序" class="headerlink" title="判断多边形的环序"></a>判断多边形的环序</h2><h3 id="面积法"><a href="#面积法" class="headerlink" title="面积法"></a>面积法</h3><p>多边形面积为正：逆时针；面积为负：顺时针； </p><h3 id="凸多边形"><a href="#凸多边形" class="headerlink" title="凸多边形"></a>凸多边形</h3><p><img src="https://gitee.com/Jackie_Tang/Jackie_Tang/raw/master/my_images/director.jpg" alt="凸多边形计算环序方向"><br>任取一点叉乘：<br>$$<br>\vec {AB} \times \vec{BC}<br>$$<br>值为正：逆时针；值为负：顺时针。</p><h3 id="极点法"><a href="#极点法" class="headerlink" title="极点法"></a>极点法</h3><p>选择多边形上的某个极点（x最大、x最小、y最大、y最小），这个极点则一定在凸包上，计算叉积得到环序方向，和上面凸多边形算法结论一致。</p><h2 id="计算多边形质心"><a href="#计算多边形质心" class="headerlink" title="计算多边形质心"></a>计算多边形质心</h2><h3 id="三角形"><a href="#三角形" class="headerlink" title="三角形"></a>三角形</h3><p>三角形 $\triangle ABC$ 质心计算公式：<br>$$<br>Centroid_x = \frac{A_x + B_x + C_x}{3}<br>$$<br>$$<br>Centroid_y = \frac{A_y + B_y + C_y}{3}<br>$$</p><h3 id="任意多边形"><a href="#任意多边形" class="headerlink" title="任意多边形"></a>任意多边形</h3><p>任意平面多边形，若能被拆分为 $i$个简单图形，每个简单图形的质心为：$C_i$，面积为：$A_i$。则质心Centroid的坐标$(Centroid_x, Centroid_y)$，满足以下公式：<br>$$<br>Centroid_x = \frac{\sum {C_i}_x A_i}{\sum A_i}<br>$$<br>$$<br>Centroid_y = \frac{\sum {C_i}_y A_i}{\sum A_i}<br>$$</p><hr><p><em>版权声明：</em><br><em>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</em></p><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 几何计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 几何计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>几何算法基础</title>
      <link href="/2020/05/10/spatial-calculate-basic/"/>
      <url>/2020/05/10/spatial-calculate-basic/</url>
      
        <content type="html"><![CDATA[<h4 id="加"><a href="#加" class="headerlink" title="加"></a>加</h4><p>$$<br>\vec A + \vec B = (A_x + B_x, A_y + B_y, A_z + B_z)<br>$$</p><h4 id="减"><a href="#减" class="headerlink" title="减"></a>减</h4><p>$$<br>\vec A - \vec B = (A_x - B_x, A_y - B_y, A_z - B_z)<br>$$</p><h4 id="模"><a href="#模" class="headerlink" title="模"></a>模</h4><p>$$<br>\left| \vec A \right| = \sqrt[]{ A_x^2 + A_y^2 + A_z^2 }<br>$$</p><h4 id="数乘（伸缩，换向）"><a href="#数乘（伸缩，换向）" class="headerlink" title="数乘（伸缩，换向）"></a>数乘（伸缩，换向）</h4><p>$$<br>k \vec A = (kA_x, kA_y, kA_z)<br>$$</p><h4 id="点乘"><a href="#点乘" class="headerlink" title="点乘"></a>点乘</h4><p>$$<br>\vec A \cdot \vec B = \sum A_i B_i = A_xB_x + A_yB_y + A_zB_z<br>$$</p><p>$$<br>\vec A \cdot \vec B = \left| \vec A \right| \left| \vec B \right| \cos \theta<br>$$</p><p>结果是一个<strong>标量</strong>（数）<br>几何意义：1.降维，2.$\vec B$在$\vec A$上的投影</p><p>$$<br>\left| \vec B \right| \cos \theta<br>$$  </p><h5 id="点乘延伸："><a href="#点乘延伸：" class="headerlink" title="点乘延伸："></a>点乘延伸：</h5><p>$$<br>\left| \vec A \cdot \vec B \right| \le \left| \vec A \right| \left| \vec B \right|<br>$$<br>等号只在$\vec A$与$\vec B$共线时成立.</p><p>$$<br>\vec A \cdot \vec B = \vec B \cdot \vec A<br>$$</p><p>$\vec A \cdot \vec B &gt; 0$，夹角在 $0^\circ$ 到 $90^\circ$ 之间<br>$\vec A \cdot \vec B = 0$，垂直<br>$\vec A \cdot \vec B &lt; 0$，夹角在 $90^\circ$ 到 $180^\circ$ 之间</p><h4 id="叉乘"><a href="#叉乘" class="headerlink" title="叉乘"></a>叉乘</h4><p>$$<br>\vec A \times \vec B = \left| \vec A \right| \left| \vec B \right| \sin \theta<br>$$</p><p>二维：<br>$$<br>\vec A \times \vec B = A_xB_y - B_xA_y<br>$$</p><p>三维：<br>$$<br>\vec A \times \vec B = A_yB_z- B_yA_z + A_zB_x - A_xB_z+ A_xB_y - A_yB_x<br>$$</p><p>几何意义：<br>二维：<br>$<br>(0,0) \quad (A_x, A_y) \quad (B_x, B_y) \quad ((A+B)_x, (A+B)_y)<br>$<br>构成的平行四边形带符号的面积<br>三维：<br>$\vec A \times \vec B$ 结果的向量，垂直于 $\vec A$ 和 $\vec B$ 构成的平面</p><h5 id="叉乘延伸："><a href="#叉乘延伸：" class="headerlink" title="叉乘延伸："></a>叉乘延伸：</h5><p>$$<br>\left| \vec A \times \vec B \right| = \left| \vec A \right| \left| \vec B \right| \sin \theta<br>$$</p><p>$$<br>\vec A \times \vec B = - \vec B \times \vec A<br>$$</p><hr><p><em>版权声明：</em><br><em>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</em></p><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 几何计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 几何计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo添加数学公式支持</title>
      <link href="/2020/05/10/hexo-LaTex/"/>
      <url>/2020/05/10/hexo-LaTex/</url>
      
        <content type="html"><![CDATA[<p>为后面的文档做准备，添加数学公式的支持。<br>网上一堆更新渲染插件的办法，我都准备用了。幸好先看完了文章，后面要改node_modules里面的源码，这怎么可能！<br>我不能把node_modules上传到github吧，不上传又怎么同步呢。后来看了一下，hexo-theme-matery做好了插件，那就简单了：<br>themes/hexo-theme-matery/_config.yml中：</p><blockquote><p>mathjax:<br>   enable: true  </p></blockquote><p>完工～<br>就是这么简单，然后每篇要用到公式的文档，头上修改<code>mathjax: true</code>就好了。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a><em>示例</em></h4><p>$\cos$   </p><p>$x_i^2$  </p><p>$|x+y|$  </p><p>$\sqrt[3]{x+y}$  </p><p>$\int_{r=1}^\infty$</p><p>$\frac{\partial x}{\partial y}$  </p><p>$$\Gamma(z) = \int_0^\infty t^{z-1}e^{-t}dt,.$$</p><p>$\alpha$  $\beta$  $\theta$</p><p>$\sum_{r=1}^n$</p><p>$\prod_{i=1}^{K}$</p><p>$$<br>\begin{bmatrix} a &amp; b &amp; c &amp; d &amp; e\\ f &amp; g &amp; h &amp; i &amp; j \\ k &amp; l &amp; m &amp; n &amp; o \\ p &amp; q &amp; r &amp; s &amp; t \end{bmatrix}<br>$$</p><hr><p><em>版权声明：</em><br><em>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</em></p><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>全国甲乙丙级测绘资质单位名单</title>
      <link href="/2020/05/09/surveying-qualification/"/>
      <url>/2020/05/09/surveying-qualification/</url>
      
        <content type="html"><![CDATA[<h2 id="全国甲乙丙级测绘资质单位名单："><a href="#全国甲乙丙级测绘资质单位名单：" class="headerlink" title="全国甲乙丙级测绘资质单位名单："></a>全国甲乙丙级测绘资质单位名单：</h2><p>甲级：1326个</p><p>乙级：5081个</p><p>丙级：8790个</p><p><a href="https://github.com/tanghaojie/PublicData/tree/master/SurveyingQualificationOfChinaMainland" target="_blank" rel="noopener">点击查看和下载</a></p><p>详细信息压缩包解压密码：关注公众号[桀士]，回复“资质”获取密码。</p><hr><p><em>版权声明：</em><br><em>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</em></p><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy爬虫使用</title>
      <link href="/2020/05/09/scrapy-tutorial/"/>
      <url>/2020/05/09/scrapy-tutorial/</url>
      
        <content type="html"><![CDATA[<h2 id="飞速起步"><a href="#飞速起步" class="headerlink" title="飞速起步"></a>飞速起步</h2><ul><li><p>安装scrapy<br><code>pip install Scrapy</code>（<em>类unix记得加 <code>sudo</code></em>）<br>安装完成以后，到命令行输入<code>Scrapy</code>，查看是否安装成功。  </p><h2 id="准备和配置"><a href="#准备和配置" class="headerlink" title="准备和配置"></a>准备和配置</h2></li><li><p><code>scrapy startproject [name]</code>创建项目。</p></li><li><p>项目文件说明</p><blockquote><p>items.py：数据模型，类似于dto、orm中的model<br>spiders：爬虫程序<br>middlewares.py：模型中的中间件<br>pipelines.py：管道，对item进行处理，类似于很多服务器的请求管道<br>settings.py：程序设置,主要是一些优先级设置,优先级越高,值越小<br>scrapy.cfg：配置</p></blockquote></li><li><p>基础设置<br>settings.py中，找到<code>ROBOTSTXT_OBEY = True</code>，改为<code>ROBOTSTXT_OBEY = False</code>或者把他注释了<br>这东西的意思是：每个网站可以在根目录下放一个robots.txt的文件，文件里面告诉了爬虫哪些网址是可以爬的，当然这就是个君子协议，靠你自己选择是不是要遵守。  </p></li><li><p>设置UTF-8：<br>settings.py中，添加一行：<code>FEED_EXPORT_ENCODING = 'utf-8'</code></p></li><li><p>生成爬虫<br>命令行输入：<code>scrapy genspider [文件名] [网址]</code>，生成爬虫文件。可以在spiders文件夹下面看到。  </p><h2 id="开始代码"><a href="#开始代码" class="headerlink" title="开始代码"></a>开始代码</h2></li><li><p>item：自己写一个item  </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">yourItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>  info1 <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>  info2 <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>info1、info2，就是数据模型对应的字段，看scrapy.Item的源码，实际上就是个dict<br>所以可以这样理解：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  info1<span class="token operator">:</span> None<span class="token punctuation">,</span>  info2<span class="token operator">:</span> None<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>spider</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> name<span class="token punctuation">.</span>items <span class="token keyword">import</span> yourItem<span class="token keyword">class</span> <span class="token class-name">YourSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>  name <span class="token operator">=</span> <span class="token string">'yourname'</span>  allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'xxx.com'</span><span class="token punctuation">]</span>  start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://xxx.com/yyy/zzz'</span><span class="token punctuation">]</span>  <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>      info1 <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div/a/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#第一个</span>      info2 <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div/a/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#extract 永远返回一个数组</span>      item <span class="token operator">=</span> yourItem<span class="token punctuation">(</span><span class="token punctuation">)</span>      item<span class="token punctuation">[</span><span class="token string">'info1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> info1      item<span class="token punctuation">[</span><span class="token string">'info2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> info2      <span class="token keyword">yield</span> item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没啥好说的，就是爬取信息，然后设置item的属性就好。  </p></li><li><p>可以爬了！！<br>命令行输入：<code>scrapy crawl yourname -o filename.csv</code>，yourname 对应 YourSpider 这个类的name变量值。就会爬取数据放到 filename.csv 中，还有其他格式，自己研究。</p></li><li><p>pipelines<br>如果你不想用scrapy默认的保存文件方法，那么就自定义一个保存文件的管道：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">YourPipeline</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 伪代码</span>      <span class="token comment" spellcheck="true"># open file</span>      <span class="token comment" spellcheck="true"># file.write(item.info1)</span>      <span class="token comment" spellcheck="true"># file.write(item.info2)   </span>      <span class="token comment" spellcheck="true"># save and close file  </span>      <span class="token keyword">return</span> item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后到settings.py，输入： </p><pre><code>ITEM_PIPELINES = {  'name.pipelines.YourPipeline': 300,}</code></pre><p>启动当前管道配置优先级，数字越小，优先级越靠前，然后就只需要输入<code>scrapy crawl yourname</code>就可以运行和保存了</p></li><li><p>调试<br>我用万能vscode：新建调试配置文件，输入</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.2.0"</span><span class="token punctuation">,</span>  <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>          <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Scrapy"</span><span class="token punctuation">,</span>          <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"python"</span><span class="token punctuation">,</span>          <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>          <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"scrapy"</span><span class="token punctuation">,</span>          <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span>              <span class="token string">"crawl"</span><span class="token punctuation">,</span>              <span class="token string">"yourname"</span>          <span class="token punctuation">]</span>      <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>搞定！</p></li></ul><hr><p><em>版权声明：</em><br><em>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</em></p><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> scrapy </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scrapy </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QGIS plugin开发使用</title>
      <link href="/2020/04/12/qgis-plugin/"/>
      <url>/2020/04/12/qgis-plugin/</url>
      
        <content type="html"><![CDATA[<h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><p>1.刚来就不建议看文档手动创建plugin了，python很熟悉的人可以看文档试试，否则还是别手动创建了，几乎所有的开发者都是通过<code>Plugin Builder</code>这个Plugin来创建的Plugin，安装好了以后，打开Plugin Builder，根据提示输入内容，一直下一步就创建好了。<br>2.用 <code>pyrcc5 -o resources.py resources.qrc</code>命令，把resources.qrc资源文件转换成py文件，主程序test.py文件中已经自动引入了。如果没有<code>pyrcc5</code>命令，执行<code>pip install PyQt5</code>安装PyQt。<br>3.把整个生成的文件夹，拷贝到，<code>~\AppData\Roaming\QGIS\QGIS3\profiles\default\python\plugins</code> 下面，所有的plugin其实都在这里。<br>4.打开qgis插件–已安装，勾选test插件，就可以看到菜单上多了按钮，点击就能打开了。</p><h4 id="以上最原始的demo就能够看见了，下面说说怎么自己写代码"><a href="#以上最原始的demo就能够看见了，下面说说怎么自己写代码" class="headerlink" title="以上最原始的demo就能够看见了，下面说说怎么自己写代码"></a>以上最原始的demo就能够看见了，下面说说怎么自己写代码</h4><p>5.插件有一个test_dialog.py文件，里面最关键的一句代码应该是<code>FORM_CLASS, _ = uic.loadUiType(os.path.join(os.path.dirname(__file__), 'Test_dialog_base.ui'))</code>，这就是加载转换.ui文件给pyqt用的。<br>6.生成的插件文件，包含了Test_dialog_base.ui，就是界面文件。安装QGIS的时候自带了Qt Designer，用Designer就可以打开就能看到和编辑了，这里从左边拖一个Push Button进去，后面用。编辑完成界面，去QGIS里面，取消勾选，在重新选中，就重新加载插件了，能够看出来结果。这里推荐一个插件 <code>Plugin Reloader</code>，不用每次去取消重勾选，它可以帮我们重加载插件。<br>7.点击事件，在.ui文件对应的.py文件的构造函数，<code>__init__</code>中，加上<code>self.pushButton.clicked.connect(self.pushButtonClicked)</code>，文件头导入<code>from PyQt5.QtWidgets import QMessageBox</code>然后定义方法：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">pushButtonClicked</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    QMessageBox<span class="token punctuation">.</span>warning<span class="token punctuation">(</span>None<span class="token punctuation">,</span> <span class="token string">'info'</span><span class="token punctuation">,</span> <span class="token string">'测试'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>8.去QGIS里面reload插件，点击按钮就能看到结果了。<br>9.更多的东西就自己尝试咯，你已经入门了。</p><hr><p><em>版权声明：</em><br><em>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</em></p><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> QGIS </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> QGIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uniapp快速实践</title>
      <link href="/2020/04/10/fast-uniapp/"/>
      <url>/2020/04/10/fast-uniapp/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>之前给文保局做了GIS系统和物联网监控系统效果不错，现在想弄个erp，问了一下业务规模，几乎约等于“零”。咋办，单一业务线走到底呗。本来说最近一直在搞flutter，就用flutter给他们弄一个，app和web（beta）一套直接就生成了。方便快速（省事）。结果呢，人家要用微信小程序…哎，甲方是爸爸。<br>结合已有技术经验和业务规模（如果有的话{笑}），还要考虑可能出现的业务平台变更这种吊炸天需求，调研了几个平台，这里我列一下：</p><blockquote><p>1.微信小程序原生：难用的ide，技术栈就是web变种。<br>2.H5+app：原生代码少不了，Android和iOS要单独适配，涉及到兼容性的问题。<br>3.mpvue：美团搞的，基于Vue.js的小程序开发框架，小程序和H5一套搞定型。<br>4.uni-app：Dcloud搞的，也是基于Vue.js的框架，iOS、Android、H5、各种小程序一套搞定型。</p></blockquote><p>对比了一下，微信小程序原生、H5+app，我直接就放弃了，微信小程序那个IDE简直不要太难用，而且改平台就是重写代码；H5+app一个人弄太费事不说，缺少优化可能效果也一般，虽然有原生app的超高天花板，但是谁叫咱就一个人，还要快速出活呢；mpvue本来我是准备选的，小程序+H5，基本上都能干了，后面要改原生app的话，我就套webview的壳，关键是开源免费，怪就怪在开源吧，我上github看了下commits和issues，最近的commit是八个月前了…issues也有点混乱的感觉，加上之前爆出美团的KPI事件，我觉得为了我的KPI和头发，还是算了吧。都说到这了，还有的选吗？最开始我是觉得uniapp商业话太严重（推广），加上不开源，还是有些顾虑的，但是好像现在是（部分）开源了？推广说明官方很重视，那。。还说什么呢，淦</p><h2 id="淦"><a href="#淦" class="headerlink" title="淦"></a>淦</h2><p>因为微信小程序和uniapp都没搞过，花时间分别看了下文档，都是web变种，会web就会开发。主要是熟悉下整体的框架，为啥这样设计，有哪些个组件分别能干啥事，有哪些API。细节千万别看，太花时间，而且你肯定记不住，所以就直接上手吧。<br>uniapp支持Weex，在app端，用vue页面的话就是用webview渲染的，用nvue的话就是用原生渲染。(｡･∀･)ﾉﾞ嗨，等于说码量还是不小啊，坑还是多啊。不过uniapp支持<code>#ifdef #endif</code>条件编译语法，这个没啥好说的，写后端的都知道，赞一个。<br>然后就是写项目了，如果看了微信小程序文档和uniapp的文档，你就会发现，其实就是个web前端的东西，无非就是语法变了一点，配置文件针对多端合并重封装了，写代码的时候要注意兼容，一个ui组件把几个端都同时考虑进来，用条件编译。就行了，就是这么简单，快速实践就介绍完了（其实是不知道说啥了）。（逃）</p><hr><p><em>版权声明：</em><br><em>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</em></p><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> uniapp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uniapp </tag>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网页插件</title>
      <link href="/2020/04/03/weatherPlugin/"/>
      <url>/2020/04/03/weatherPlugin/</url>
      
        <content type="html"><![CDATA[<h2 id="天气"><a href="#天气" class="headerlink" title="天气"></a>天气</h2><p>中国天气网：<a href="https://cj.weather.com.cn/plugin/pc" target="_blank" rel="noopener">https://cj.weather.com.cn/plugin/pc</a><br>生成插件放到： themes/matery/layout/layout.ejs</p><h2 id="动态诗词"><a href="#动态诗词" class="headerlink" title="动态诗词"></a>动态诗词</h2><p>今日诗词：<a href="https://www.jinrishici.com/" target="_blank" rel="noopener">https://www.jinrishici.com/</a><br>一言: <a href="https://hitokoto.cn/" target="_blank" rel="noopener">https://hitokoto.cn/</a></p><hr><p><em>版权声明：</em><br><em>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</em></p><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> plugin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> plugin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的博客地址</title>
      <link href="/2020/04/03/myblogaddress/"/>
      <url>/2020/04/03/myblogaddress/</url>
      
        <content type="html"><![CDATA[<blockquote><p><del>由于众所周知的原因，单纯把博客部署到一个地方，很可能访问不到，或者访问很慢，所以这里同时部署到github和gitee，提高访问速度</del> [手动狗头]</p></blockquote><ul><li>前置条件：你会搭博客（网站）</li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p> 我的两个博客地址：<br> <a href="http://tanghaojie.github.io/">http://tanghaojie.github.io/</a><br> <a href="https://jackie_tang.gitee.io/" target="_blank" rel="noopener">https://jackie_tang.gitee.io/</a><br> <br></p><hr><h2 id="gitee-pages的一个坑"><a href="#gitee-pages的一个坑" class="headerlink" title="gitee pages的一个坑"></a>gitee pages的一个坑</h2><p> 每次远程部署以后，需要手动到gitee pages服务里面去，手动点击更新按钮才能自动更新博客。（想自动更新？gitee pages pro了解一下）</p><h2 id="从github同步方式部署"><a href="#从github同步方式部署" class="headerlink" title="从github同步方式部署"></a>从github同步方式部署</h2><ul><li>在gitee新建仓库:<br><img src="https://gitee.com/Jackie_Tang/Jackie_Tang/raw/master/my_images/gitee_blog.jpg" alt="就像这样配置就好"></li></ul><p> <em>注意点：</em><br> <em>1.仓库名用gitee给你分配的个人地址名，可以到 个人中心–&gt;个人空间地址 中看到，不一定是你的用户名，比如我的地址是：Jackie_Tang，我的用户名是：JackieTang。因为我改过名。。。</em><br> <em>2.下面选择导入已有仓库，然后填入github地址以后，仓库名会自动变成github仓库名，所以又需要你自己去上面改一次</em><br> <br></p><ul><li><p>点击 创建，等待gitee自动导入github仓库。</p><br></li><li><p>导入完成如图配置<br><img src="https://gitee.com/Jackie_Tang/Jackie_Tang/raw/master/my_images/gitee_blog2.jpg" alt="配置gitee pages"></p></li></ul><p> <em>注意点：</em><br> <em>1.选择使用Https，否则会跨域</em></p><p> 以上步骤就完成了，你的博客地址为：{个人地址名}.gitee.io，以后要同步github的数据，只需要这样操作：<br> <img src="https://gitee.com/Jackie_Tang/Jackie_Tang/raw/master/my_images/gitee_blog3.jpg" alt="同步"></p><hr><h2 id="同步上传"><a href="#同步上传" class="headerlink" title="同步上传"></a>同步上传</h2><p> 我用的hexo，在 <code>_config.yml</code> 文件：</p><pre class="line-numbers language-json"><code class="language-json"> deploy<span class="token operator">:</span>  type<span class="token operator">:</span> git  repo<span class="token operator">:</span>     github<span class="token operator">:</span> https<span class="token operator">:</span>//github.com/tanghaojie/tanghaojie.github.io.git    gitee<span class="token operator">:</span> https<span class="token operator">:</span>//gitee.com/Jackie_Tang/Jackie_Tang.git  branch<span class="token operator">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 加两个repo就好</p><hr><p><em>版权声明：</em><br><em>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</em></p><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中华人民共和国省级行政区域界线标注的小tip</title>
      <link href="/2020/04/01/provincial-boundary/"/>
      <url>/2020/04/01/provincial-boundary/</url>
      
        <content type="html"><![CDATA[<p>如果大段以河道（或其他水体）为省界的，全部以实线标注会影响河流水体的连续呈现时，则用断续线表示。<br>如晋陕、晋豫黄河省界段，川藏、川滇（东段）长江省界段。</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>我本人没有找到这个规定的出处，是否是国家规范不做保证。<br>但是百度地图现在看已经是这样做标注了。<br><img src="https://gitee.com/Jackie_Tang/Jackie_Tang/raw/master/my_images/provincialBoundary.jpg" alt="川藏交界"></p><hr><p><em>版权声明：</em><br><em>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</em></p><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> gis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flutter定位插件location</title>
      <link href="/2020/03/31/flutter-location/"/>
      <url>/2020/03/31/flutter-location/</url>
      
        <content type="html"><![CDATA[<p>iOS没测试，Android需要用到GMS来辅助定位，所以国内不能用！不能用！！不能用！！！</p><hr><p><em>版权声明：</em><br><em>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</em></p><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
          <category> location </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
            <tag> location </tag>
            
            <tag> 定位 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flutter加载地图的几种方式对比[测试]</title>
      <link href="/2020/03/31/flutter-load-map/"/>
      <url>/2020/03/31/flutter-load-map/</url>
      
        <content type="html"><![CDATA[<p>1.<a href="https://pub.dev/packages/flutter_map" target="_blank" rel="noopener">flutter_map</a>：Leaflet用 Flutter的实现，主要用于加载瓦片地图和简单注记，复杂的几何要素可以用插件的形式，但要自己实现代码。没有自带定位的功能，要自己处理。综合来看，只用瓦片地图，定位这些基础功能的话，可以选这个，团队强大的话，复杂功能也可以自己搞插件。天花板挺高的。</p><p><img src="https://gitee.com/Jackie_Tang/Jackie_Tang/raw/master/my_images/flutter_map.jpg" alt="flutter_map，自己加了定位"></p><p>2.<a href="https://pub.dev/packages/webview_flutter" target="_blank" rel="noopener">webview_flutter</a>：fluter官方出品的webview插件，没什么好说的，网页能干的事他都能干。最大的问题是目前还是预览版，官方说因为用了新的机制，具体什么机制我也没看，能不能实现官方没说，deadline也没说，有点不让人放心。</p><p>3.<a href="https://pub.dev/packages/flutter_webview_plugin" target="_blank" rel="noopener">flutter_webview_plugin</a>：网上综合推荐比较多的一个插件了，就是调用native webview，稳定性，兼容性肯定没问题。但是由于接入原生，导致webview始终在最上层，会覆盖在所有 Flutter widget之上，灵活性牺牲很大。最新的说明里写了，要把这个插件合并到上面提到的官方插件里面去了。所以基本上不用选了。</p><p><img src="https://gitee.com/Jackie_Tang/Jackie_Tang/raw/master/my_images/webviewplugin.jpg" alt="flutter_webview_plugin,注意右上角debug标识都被覆盖了"></p><p>4.其他库：比如说高德amap，百度地图，这类就局限平台了。</p><hr><p>目前就测试了这几种地图使用方式，总的来说，有团队，有时间，能自己研发的，可以上。不然的话还是用混合开发吧，flutter还需要给他些时间来成熟。</p><hr><p><em>版权声明：</em><br><em>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</em></p><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
          <category> map </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
            <tag> map </tag>
            
            <tag> webview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter Doctor：Android license status unknown</title>
      <link href="/2020/03/27/post/"/>
      <url>/2020/03/27/post/</url>
      
        <content type="html"><![CDATA[<p>执行：</p><pre><code>flutter doctor --android-licenses</code></pre><p>之后一路同意就好了。</p><p>如果显示：</p><pre><code>&gt; Android sdkmanager tool not found (PATH)</code></pre><p>1.打开Android SDK Manager<br>2.选SDK Tools<br>3.把下面的，Hide Obsolete Packages，取消勾选<br>4.打勾Android SDK Tools (Obsolete)<br>5.确定安装</p><p>Flutter团队知道这个问题，官方建议就是这么处理，后续版本会解决的。</p><hr><p><em>版权声明：</em><br><em>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</em></p><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
            <tag> Android </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>office2016零售版转VOL版</title>
      <link href="/2020/03/19/office2016ToVol/"/>
      <url>/2020/03/19/office2016ToVol/</url>
      
        <content type="html"><![CDATA[<p>以下代码复制为：.bat文件</p><pre class="line-numbers language-shell"><code class="language-shell">@ECHO OFF&PUSHD %~DP0setlocal EnableDelayedExpansion&color 3e & cd /d "%~dp0"title office2016 retail转换vol版%1 %2mshta vbscript:createobject("shell.application").shellexecute("%~s0","goto :runas","","runas",1)(window.close)&goto :eof:runasif exist "%ProgramFiles%\Microsoft Office\Office16\ospp.vbs" cd /d "%ProgramFiles%\Microsoft Office\Office16"if exist "%ProgramFiles(x86)%\Microsoft Office\Office16\ospp.vbs" cd /d "%ProgramFiles(x86)%\Microsoft Office\Office16":WHclsecho.echo 选择需要转化的office版本序号echo.echo --------------------------------------------------------------------------------echo 1. 零售版 Office Pro Plus 2016 转化为VOL版echo.echo 2. 零售版 Office Visio Pro 2016 转化为VOL版echo.echo 3. 零售版 Office Project Pro 2016 转化为VOL版echo.echo. --------------------------------------------------------------------------------set /p tsk="请输入需要转化的office版本序号【回车】确认（1-3）: "if not defined tsk goto:errif %tsk%==1 goto:1if %tsk%==2 goto:2if %tsk%==3 goto:3:errgoto:WH:1clsecho 正在安装 KMS 许可证...for /f %%x in ('dir /b ..\root\Licenses16\proplusvl_kms*.xrm-ms') do cscript ospp.vbs /inslic:"..\root\Licenses16\%%x" >nulecho 正在安装 MAK 许可证...for /f %%x in ('dir /b ..\root\Licenses16\proplusvl_mak*.xrm-ms') do cscript ospp.vbs /inslic:"..\root\Licenses16\%%x" >nulset /p y=请输入激活密钥，按回车确定:cscript ospp.vbs /inpkey:%y%goto :e:2clsecho 正在安装 KMS 许可证...for /f %%x in ('dir /b ..\root\Licenses16\visio???vl_kms*.xrm-ms') do cscript ospp.vbs /inslic:"..\root\Licenses16\%%x" >nulecho 正在安装 MAK 许可证...for /f %%x in ('dir /b ..\root\Licenses16\visio???vl_mak*.xrm-ms') do cscript ospp.vbs /inslic:"..\root\Licenses16\%%x" >nulset /p y=请输入激活密钥，按回车确定:cscript ospp.vbs /inpkey:%y%goto :e:3clsecho 正在安装 KMS 许可证...for /f %%x in ('dir /b ..\root\Licenses16\project???vl_kms*.xrm-ms') do cscript ospp.vbs /inslic:"..\root\Licenses16\%%x" >nulecho 正在安装 MAK 许可证...for /f %%x in ('dir /b ..\root\Licenses16\project???vl_mak*.xrm-ms') do cscript ospp.vbs /inslic:"..\root\Licenses16\%%x" >nulset /p y=请输入激活密钥，按回车确定:cscript ospp.vbs /inpkey:%y%goto :e:eecho.echo 转化完成，按任意键退出！pause >nulexit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>让填写秘钥时，输入 XQNVK-8JYDB-WJ9W3-YJ8YR-WFG99</p><hr><p><em>版权声明：</em><br><em>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</em></p><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue use video.js support flash rtmp</title>
      <link href="/2020/03/12/vueVideo/"/>
      <url>/2020/03/12/vueVideo/</url>
      
        <content type="html"><![CDATA[<p>在Vue中使用video.js，兼容flash视频，研究了一天，简单记录一下。<br>1.包安装</p><pre class="line-numbers language-shell"><code class="language-shell">npm install --save videojsnpm install --save videojs-flash //如果需要用flash的话<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2.实现vue-video.vue文件</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>video ref<span class="token operator">=</span><span class="token string">"videoPlayer"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"video-js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>video<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> videojs <span class="token keyword">from</span> <span class="token string">'video.js'</span><span class="token keyword">import</span> <span class="token string">'videojs-flash'</span>                                <span class="token comment" spellcheck="true">// if use flash</span><span class="token keyword">import</span> SWF_PATH <span class="token keyword">from</span> <span class="token string">'videojs-swf/dist/video-js.swf'</span>  <span class="token comment" spellcheck="true">// if use flash</span><span class="token keyword">import</span> <span class="token string">'video.js/dist/video-js.min.css'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  props<span class="token punctuation">:</span> <span class="token punctuation">{</span>    options<span class="token punctuation">:</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> Object<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      player<span class="token punctuation">:</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>flash <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>           <span class="token comment" spellcheck="true">// if use flash</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>flash<span class="token punctuation">.</span>swf <span class="token operator">=</span> SWF_PATH <span class="token comment" spellcheck="true">// if use flash</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>player <span class="token operator">=</span> <span class="token function">videojs</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>videoPlayer<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>player<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>player<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.使用</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>vue<span class="token operator">-</span>video <span class="token punctuation">:</span>options<span class="token operator">=</span><span class="token string">"videoOptions"</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> vueVideo <span class="token keyword">from</span> <span class="token string">'./path/to/vue-video.vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    vueVideo  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// videoOptions标准参考 https://docs.videojs.com/</span>      videoOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>        autoplay<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        controls<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        language<span class="token punctuation">:</span> <span class="token string">'zh'</span><span class="token punctuation">,</span>        width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>        height<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>        sources<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            src<span class="token punctuation">:</span> <span class="token string">'rtmp://*************/live/qq'</span><span class="token punctuation">,</span>            type<span class="token punctuation">:</span> <span class="token string">'rtmp/flv'</span>          <span class="token punctuation">}</span>        <span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">// techOrder: ['flash']</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>rtmp、mp4已测试没有问题，其他格式就没测试了。<br>需要发布才能进行测试，类似file://C:/test.html这种文件形式的是无法使用的</p><hr><p><em>版权声明：</em><br><em>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</em></p><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> video.js </tag>
            
            <tag> rtmp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Postgis和EntityFrameworkCore的关系映射，几何字段映射</title>
      <link href="/2019/12/12/entityframeworkcorewithpostgis/"/>
      <url>/2019/12/12/entityframeworkcorewithpostgis/</url>
      
        <content type="html"><![CDATA[<p><code>这篇文章主要讨论Code First模式，其他模式我不怎么用的，不敢保证</code></p><p>  现在搞开发数据库操作基本上都用Orm了吧，但是我们搞GIS的，因为涉及到空间几何字段、空间拓扑运算操作的情况，很多时候传统的Orm就解决不了了，所以很多时候要么就直接用odbc原生Sql操作了；或者是业务部分EF+空间几何Sql这么来操作。这两个方案实现起来确实没什么问题，但前者用起来实在麻烦，很多简单的东西就搞复杂了，要么统一封装一下的话就又回到Orm的路子上；后者是最灵活的一种方案了，任何需求都可以用这个办法来解决，但问题就是整个软件的框架会显得很混乱，新人来了经常问为啥要这样搞，思维切换起来很麻烦，如果要改需求还涉及到空间几何的话，那只能打一架好了…</p><p>  之前的DotnetFramework+Npgsql+EF是不支持使用PostGIS扩展的，官方一直也没明确表态后续规划什么的，直到最近在github上看到开发者说以后应该不会支持了，会把重心放到EF Core上。因此，想要直接映射几何字段几乎变成了不可能的事情。</p><blockquote><p><em>网上有用SharpMap做映射的解决方案，但是我一直没有测试成功过</em><br><em>官方的数据类型映射表里面也写了System.Data.Spatial.DbGeometry可以映射到Geometry类型。这个能在CodeFirst下识别，但生成的字段类型并不是Geometry，而是Byte[]，我也不知道哪错了，诶</em></p></blockquote><p>  直到最近我打算把平台切换到.NetCore，然后去研究了一下，整个人就豁然开朗了啊。1.微软官方明确表态实现几何类型的字段。2.Npgsql的Core版本确实在实现Postgis的东西，而且进度神速。那么，就用呗~</p><p>依赖很简单，就两个包：</p><pre class="line-numbers language-powershell"><code class="language-powershell">1<span class="token punctuation">.</span>Npgsql<span class="token punctuation">.</span>EntityFrameworkCore<span class="token punctuation">.</span>PostgreSQL2<span class="token punctuation">.</span>Npgsql<span class="token punctuation">.</span>EntityFrameworkCore<span class="token punctuation">.</span>PostgreSQL<span class="token punctuation">.</span>NetTopologySuite<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后是配置，首先数据库里面要启用Postgis，简单：<code>Create Extension Postgis;</code><br>EFCore框架：</p><pre class="line-numbers language-csharp"><code class="language-csharp">dbContextOptions<span class="token punctuation">.</span><span class="token function">UseNpgsql</span><span class="token punctuation">(</span>connectionString<span class="token punctuation">,</span> o <span class="token operator">=</span><span class="token operator">></span> o<span class="token punctuation">.</span><span class="token function">UseNetTopologySuite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这在哪自己找一下</span><span class="token comment" spellcheck="true">//这在你的DbContext里面</span><span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">OnModelCreating</span><span class="token punctuation">(</span>ModelBuilder builder<span class="token punctuation">)</span><span class="token punctuation">{</span>    builder<span class="token punctuation">.</span><span class="token function">HasPostgresExtension</span><span class="token punctuation">(</span><span class="token string">"postgis"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//启用postgis扩展，需要手动写扩展名也是有原因的哦</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>齐活了，就这么简单。<br>使用的话就很简单了：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> NetTopologySuite<span class="token punctuation">.</span>Geometries<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestGeometry</span><span class="token punctuation">{</span>  <span class="token punctuation">[</span><span class="token function">Column</span><span class="token punctuation">(</span>TypeName <span class="token operator">=</span> <span class="token string">"geometry (MultiLineString)"</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//可以指定类型、维度、坐标系</span>  <span class="token keyword">public</span> MultiLineString Geom <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有了这个后续的操作就简单多了：</p><pre class="line-numbers language-csharp"><code class="language-csharp">Geom<span class="token punctuation">.</span>Area <span class="token comment" spellcheck="true">//面积</span>Geom<span class="token punctuation">.</span><span class="token function">AsBinary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//转wkb</span>Geom<span class="token punctuation">.</span><span class="token function">AsText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//同ToString()，转wkt</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就不一一列举了，官方文档很全面的。</p><p><strong>* 补充一下其他的坑吧，转 .Net Core以后，Gdal会成为一个很大的问题，这个需要好好的评估一下，Gdal目前还没有官方做Core的适配，这个影响挺大的。当然Gdal的功能也有相应各个独立的库能替换的，但始终不会像Gdal这么得心应手，一定要注意评估这一点！！！ *</strong></p><hr><p><em>版权声明：</em><br><em>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</em></p><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
          <category> gis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gis </tag>
            
            <tag> entityframework </tag>
            
            <tag> .net core </tag>
            
            <tag> postgis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站收录</title>
      <link href="/2019/10/12/website/"/>
      <url>/2019/10/12/website/</url>
      
        <content type="html"><![CDATA[<ol><li><a href="https://experiments.withgoogle.com/" target="_blank" rel="noopener">Google探索实验室</a></li><li><a href=""></a></li><li><a href=""></a></li><li><a href=""></a></li><li><a href=""></a></li><li><a href=""></a></li><li><a href=""></a></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> website </category>
          
      </categories>
      
      
        <tags>
            
            <tag> website </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>地理信息相关标准</title>
      <link href="/2019/10/12/gisstandard/"/>
      <url>/2019/10/12/gisstandard/</url>
      
        <content type="html"><![CDATA[<ol><li><a href="https://www.opengeospatial.org/standards" target="_blank" rel="noopener">OGC</a><blockquote><p>开放地理空间信息联盟(Open Geospatial Consortium),是一个非盈利的国际标准组织，它制定了数据和服务的一系列标准，GIS厂商按照这个标准进行开发可保证空间数据的互操作。</p></blockquote></li></ol><hr><ol start="2"><li><a href="https://spatialreference.org/" target="_blank" rel="noopener">Spatial reference</a><blockquote><p>坐标系统收录、查询、上传、教育。</p></blockquote></li></ol><hr><ol start="3"><li><a href="https://gdal.org/" target="_blank" rel="noopener">GDal</a><blockquote><p>GDAL(Geospatial Data Abstraction Library)是一个在X/MIT许可协议下的开源栅格空间数据转换库。它利用抽象数据模型来表达所支持的各种文件格式。它还有一系列命令行工具来进行数据转换和处理。OGR是GDAL项目的一个分支，功能与GDAL类似，只不过它提供对矢量数据的支持。</p></blockquote></li></ol><hr><ol start="4"><li><a href="http://epsg.io/" target="_blank" rel="noopener">epsg</a><blockquote><p>全球坐标系统</p></blockquote></li></ol><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> gis </category>
          
          <category> tips </category>
          
          <category> website </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tips </tag>
            
            <tag> gis </tag>
            
            <tag> website </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>地理地图数据提供网站</title>
      <link href="/2019/10/12/gisdatawebsites/"/>
      <url>/2019/10/12/gisdatawebsites/</url>
      
        <content type="html"><![CDATA[<ol><li><a href="https://www.osgeo.cn/data/" target="_blank" rel="noopener">OSGeo中国</a><blockquote><p>开放地理空间信息科学：技术、数据、知识共享。</p></blockquote></li></ol><hr><ol start="2"><li><a href="http://spatialhadoop.cs.umn.edu/index.html" target="_blank" rel="noopener">spatial hadoop</a><blockquote><p>一个为空间数据设计的map reduce框架，有很多超大的数据集提供下载。</p></blockquote></li></ol><hr><ol start="3"><li><a href="http://www.webmap.cn/main.do?method=index" target="_blank" rel="noopener">全国地理信息资源目录服务</a><blockquote><p>国家基础地理信息中心提供的资源查询和下载服务。</p></blockquote></li></ol><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> gis </category>
          
          <category> tips </category>
          
          <category> website </category>
          
          <category> data </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tips </tag>
            
            <tag> gis </tag>
            
            <tag> website </tag>
            
            <tag> data </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些好玩的地理网站</title>
      <link href="/2019/10/12/gisForFunWebsites/"/>
      <url>/2019/10/12/gisForFunWebsites/</url>
      
        <content type="html"><![CDATA[<ol><li><a href="https://www.openstreetmap.org" target="_blank" rel="noopener">Open Street Map</a><blockquote><p>人人都可编辑的世界地图，一个网上地图协作计划的产物。</p></blockquote></li></ol><hr><ol start="2"><li><a href="https://lines.chromeexperiments.com" target="_blank" rel="noopener">Land Lines</a><blockquote><p>Google Creative Lab 提交的一个 Chrome Experiments 项目，基于深度学习。</p></blockquote></li></ol><hr><ol start="3"><li><a href="https://geoguessr.com/" target="_blank" rel="noopener">GeoGuessr</a><blockquote><p>这是一个真实的「情景判断游戏」。开局就是随便把玩家落在 Google 街景中的某一处，你可以在街景地图中一路游走，然后根据周遭信息，判断出身处何处。</p></blockquote></li></ol><hr><ol start="4"><li><a href="https://experiments.withgoogle.com/chrome/globe" target="_blank" rel="noopener">The WebGL Globe</a><blockquote><p>The WebGL Globe 是一个使数据地理可视化的平台。利用这个项目提供的开源代码，我们可以制作属于自己的数据地球。在项目网站上有不少网友提交的实验，根据人口变化、火山活动、各地维基百科篇目等方方面面的数据产生不同的可视化地球。</p></blockquote></li></ol><hr><ol start="5"><li><a href="https://ojack.github.io/ghost-map/" target="_blank" rel="noopener">Ghost Map</a><blockquote><p>Ghost Map收录了各个城市的街道路线，将其隐藏在黑暗中。通过移动鼠标，光亮像细流入川一般流淌到附近街道上，灯火明亮，车水马龙，勾勒出这座城市的建筑与街道规划。当鼠标指针停止移动，万物歇息，一切又沉入黑暗。</p></blockquote></li></ol><hr><ol start="6"><li><a href="https://snazzymaps.com" target="_blank" rel="noopener">SNAZZY MAPS</a><blockquote><p>在线Google Maps配图。自带多种风格自由选择，而且都可以自定义。</p></blockquote></li></ol><hr><ol start="7"><li><a href="http://pixelmap.amcharts.com/" target="_blank" rel="noopener">Pixel Map</a><blockquote><p>在线像素地图生成。</p></blockquote></li></ol><hr><ol start="8"><li><a href="http://www.dituhui.com/" target="_blank" rel="noopener">地图慧</a><blockquote><p>在线地图制作，上传自己的数据，可以做热力图、流向图等等各种专题地图。</p></blockquote></li></ol><hr><ol start="9"><li><a href="https://stamen.com" target="_blank" rel="noopener">stamen</a><blockquote><p>地图与制图、数据可视化。</p></blockquote></li></ol><hr><ol start="10"><li><a href="https://www.mapbox.com/" target="_blank" rel="noopener">Map Box</a><blockquote><p>在线地图制图。</p></blockquote></li></ol><hr><ol start="11"><li><a href="http://mapstack.stamen.com/" target="_blank" rel="noopener">Map Stack</a><blockquote><p>使设计地图免费,简单,有趣。</p></blockquote></li></ol><hr><ol start="12"><li><a href="https://cadmapper.com/" target="_blank" rel="noopener">CAD Mapper</a><blockquote><p>cad su 等格式的模型下载。</p></blockquote></li></ol><hr><ol start="13"><li><a href="https://www.ageeye.cn/" target="_blank" rel="noopener">发现中国</a><blockquote><p>中国历史地图、古地图。</p></blockquote></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> gis </category>
          
          <category> tips </category>
          
          <category> website </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tips </tag>
            
            <tag> fun </tag>
            
            <tag> gis </tag>
            
            <tag> website </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
