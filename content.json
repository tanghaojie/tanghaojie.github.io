{"meta":{"title":"桀士","subtitle":"『桀士』","description":"看天空的女孩是寂寞的，看天空的男孩是找UFO！","author":"Jackie Tang(唐浩桀)","url":"https://tanghaojie.github.io","root":"/"},"pages":[{"title":"contact","date":"2018-09-30T09:25:30.000Z","updated":"2019-10-11T07:01:24.899Z","comments":true,"path":"contact/index.html","permalink":"https://tanghaojie.github.io/contact/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"about","date":"2018-09-30T09:25:30.000Z","updated":"2019-10-11T07:00:53.111Z","comments":true,"path":"about/index.html","permalink":"https://tanghaojie.github.io/about/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"categories","date":"2018-09-30T09:25:30.000Z","updated":"2019-10-11T06:59:13.783Z","comments":true,"path":"categories/index.html","permalink":"https://tanghaojie.github.io/categories/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"friends","date":"2018-12-12T13:25:30.000Z","updated":"2019-10-11T07:01:39.596Z","comments":true,"path":"friends/index.html","permalink":"https://tanghaojie.github.io/friends/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"tags","date":"2018-09-30T10:23:38.000Z","updated":"2019-10-11T07:00:25.097Z","comments":true,"path":"tags/index.html","permalink":"https://tanghaojie.github.io/tags/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"}],"posts":[{"title":"Cesium+Vue大型3DTile数据加载示例（约4平方公里）","slug":"cesium-vue-big-model-example","date":"2021-02-03T08:05:29.000Z","updated":"2021-02-03T08:13:25.338Z","comments":true,"path":"2021/02/03/cesium-vue-big-model-example/","link":"","permalink":"https://tanghaojie.github.io/2021/02/03/cesium-vue-big-model-example/","excerpt":"","text":"点击跳转 版权声明：除非注明，本博文章均为原创，转载请以链接形式标明本文地址。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[],"author":null},{"title":"网页开启设计模式 &#91 速记 &#93","slug":"web-design-mode","date":"2021-01-07T04:13:50.000Z","updated":"2021-01-07T07:11:27.210Z","comments":true,"path":"2021/01/07/web-design-mode/","link":"","permalink":"https://tanghaojie.github.io/2021/01/07/web-design-mode/","excerpt":"","text":"document.designMode = 'off' 版权声明：除非注明，本博文章均为原创，转载请以链接形式标明本文地址。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[],"author":null},{"title":"科普-海平面高、GPS高、基准面高的区别和定义","slug":"Mean-SeaLevel-GPS-TheGeoid","date":"2020-11-25T14:35:49.000Z","updated":"2020-11-26T04:16:42.011Z","comments":true,"path":"2020/11/25/Mean-SeaLevel-GPS-TheGeoid/","link":"","permalink":"https://tanghaojie.github.io/2020/11/25/Mean-SeaLevel-GPS-TheGeoid/","excerpt":"","text":"从业这么久了，很多很多（包括行业内）人，根本搞不清楚海平面高、GPS高、基准面高的区别，这里翻译和补充说明一下。 声明原文出自https://www.esri.com/news/arcuser/0703/geoid1of3.html，我只是进行了翻译和针对国内情况的补充。原文作者：Witold Fraczek, Esri Applications Prototype Lab。以下正文： 通常，研究和技术的努力会带来意外的积极成果。当欧洲探险家开始寻找通向印度的捷径时，他们发现了新世界。当葡萄球菌细菌培养物被普通霉菌错误地污染时，霉菌和细菌菌落之间的空白区域会得出结论，即霉菌青霉素会产生抑制细菌生长的化合物。这一偶然发现促进了青霉素的发展。 众所周知，地球上没有完美的几何形状，大地水准面用来描述地球独特且不规则的形状。但是，直到最近（原文发表时间：2003年7月）才观察到由全球平均海平面（MSL：the global mean sea level）造成的海面有更明显的不规则性。这些不规则性比专家的预测高出一个数量级。受地球引力的控制，这些不规则现象形成了非常平缓但又庞大的“丘陵”和“山谷”。这一惊人发现是通过使用GPS来实现的，GPS是美国国防部设计的一项技术，旨在彻底改变美国海军和空军的导航技术。GPS已经做到了，而且还能做到更多。 什么是平均海平面？几代人以来，表达地形或测深标高的唯一方法是将其与海平面相关联。大地测量学家曾经认为，海洋与地球的重力平衡，并形成了完美的规则图形。MSL通常被描述为潮汐数据，它是在特定的19年周期内观察到的每小时水位升高的算术平均值。该定义将月球和太阳引力变化影响引起的潮汐高潮和低潮进行平均。 MSL定义为局部区域的零海拔。高程引用的零表面称为垂直基准。对于地图制作者来说不幸的是，海平面并不是一个简单的表面。由于海面符合地球的重力场，因此MSL的丘陵和山谷与陆地表面相似，但更平滑。但是，西班牙定义的零海拔与加拿大定义的零海拔不同，这就是为什么本地定义的垂直基准彼此不同的原因。 MSL表面处于重力平衡状态。它可以看作是在各大洲下延伸，是大地水准面的近似值。根据定义，大地水准面描述了地球的不规则形状，并且是用于测量高程的真正零表面。由于无法直接观察到大地水准面，因此无法直接测量大地水准面上方或下方的高度，并且无法通过进行重力测量和对表面进行数学建模来推断。以前，无法精确测量大地水准面，因此MSL可以粗略地估算它。尽管出于实际目的，假定在海岸线处的大地水准面和MSL表面基本相同，但在某些地点，大地水准面实际上可能与MSL相差几米。 不同的测量值GPS改变了任何地点的高度测量方式。GPS在其水平和垂直基准面上均使用椭球坐标系，椭球体或扁平的球体用于表示地球的几何模型。 从概念上讲，这种精确计算的椭球体（称为扁圆椭球体）旨在复制MSL作为主要的大地测量参考或垂直基准。如果使用此椭球垂直基准，则椭球上方的高度将与MSL不同，并且大多数位置的直接高程读数都将很尴尬。造成这种情况的部分原因是，GPS的海拔高度定义不涉及MSL，而是涉及称为参考椭球的重力表面。由于参考椭球旨在紧密接近MSL，因此当两个数字相差很大时，令人惊讶。 TOPEX / POSEIDON卫星于1992年发射，专门设计用于执行非常精确的高空观测。这些测量结果表明，人为误差和GPS错误都不是造成椭球和MSL测量值之间有时存在重大差异的原因。实际上，由地球海平面产生的三维表面在几何上是不正确的，并且无法通过数学方法计算出其明显的不规则性。这解释了基于椭球的GPS高程读数与精确地形图上显示的高程之间的区别。 对加利福尼亚州雷德兰兹市Esri总部的海拔读数进行了简短检查，就证明了这些差异。坎普斯高程显示在地形四边形地图和高分辨率数字高程模型（DEM）上，该区域位于MSL上方约400米处。但是，对于相同位置的精确测量后，未经调整的GPS读数通常显示海拔为368米。 为什么相距32米？GPS接收器使用由世界大地测量系统（WGS84）椭球估计的理论海平面，它并不完全遵循理论MSL。用椭圆形近似的MSL与重力或地球的质心有关。WGS84椭球和大地水准面之间的差异随位置而异。继续此示例，尤卡帕（Yucaipa）（位于雷德兰兹以东不到10英里的城市）的海拔读数相差31.5米。 （补充）中国国内根据目前的经验值来看，这个差异也在30米左右。 大地水准面和椭球体随着大地水准面的波动起伏相交。波动起伏是由几种现象引起的，其中最重要的是地球非均质性引起的重力异常的存在。地壳中的岩浆密度分布不​​均匀。在密度较大的区域，它可能会更高，因此会变凉。密度较小的区域相应地较低且较热。稠密的岩浆施加更强的拉力，导致水团的堆积。对于这些卷是否移动或移动速度知之甚少。如果这些位置确实移动，它们的移动将与其他地质事件的移动速度相同（即非常缓慢）。 从太空获得的精确测量值将应用于GPS读数。这些测量基于椭球表面，该椭球表面是从三维笛卡尔坐标系获得的数学上生成的地球模型。GPS接收器只能提供椭圆（几何）高度。 但是，大多数用户期望与MSL相关的准确的海拔读数。因此，较新的GPS设备基于使用地理坐标作为输入的公式，表格和矩阵的组合，将“正交”（地理）高度测量结果输出为“幕后”计算结果。提供了从粗糙或精细DEM矩阵中获取的地理位置的适当高度，而不是z值（或高度）的实际测量值。一些接收器使用大地水准面高度的近似值，以根据椭球高度估算正高。还有一些单位，使用较旧的技术作业，提供基于椭球体的z值改正读数。 全球大地水准面定义-Geoid99GPS需要一个全球定义的大地水准面，以便GPS接收器可以计算所需的正确z值作为全局垂直基准的参考面。（美国）国家大地测量局（National Geodetic Survey）开发了Geoid99，这是一种具有亚米级精度的模型。它被用作零表面以在全球范围内建立一致且准确的高程。但是，尽管达到了令人印象深刻的准确性水平，但由于重力效应，Geoid99的某些部分仍偏离了MSL。 由美国国家航空航天局戈达德太空飞行中心，美国国家影像和制图局（NIMA）和俄亥俄州立大学合作开发的地球大地测量模型（EGM96）已用于计算精确度优于一米的大地水准面波动（除缺乏准确的表面重力数据的区域）。该表面的值显示每个位置的MSL与用作GPS高程读数参考的椭圆形之间的差值。换句话说，EGM96显示出海洋表面的引力确实是多么不均匀。大地水准面相对于WGS84椭球的最大起伏范围为192米。最大的异常现象是在印度东南部发现的，该大地水准面位于椭球以下105米，并且在印度尼西亚东部发现了最大的膨胀。 “如何”模拟如果没有重力异常，大陆海岸线将如何变化？简短的答案是，它们看起来就像地球是椭球一样。最大的起伏集中在印度洋北部和印度尼西亚群岛内。因此，将出现目前在澳大利亚北部的阿拉法拉海和卡彭特里亚湾所覆盖的地区。相反，其他地区，如恒河和雅鲁藏布江等南亚主要河流三角洲形成的低地，以及印度河，伊洛瓦底江和湄公河的三角洲，也将下沉。 作为一项智力练习，请想象一下地球是一个椭球体和一个椭球体的几何完美形状。为了可视化这些“假设”场景，使用表示距地球中心的距离的栅格生成了计算机模拟，并使用ArcGIS Spatial Analyst扩展程序中的栅格计算器生成了该模拟。通过删除EGM96识别出的重力异常来修改地球仪的标准数字高程模型。椭球和椭球的这些几何上正确的表示被用于生成称为SPHEROID DEM和ELLIPSOID DEM的GIS模拟。随附的插图显示了这些形状以及其他场景对陆地和海洋分布的影响。 SPHEROID DEM（球形DEM）SPHEROID DEM是基于以下假设创建的：地球的形状，或更准确地说，以MSL表示的地球表面的形状是球形。换句话说，连接质心和假设的等势引力表面的地球半径在地球上各处都相同。半径设置为6,367,473米，这是从纬度为45度的椭圆参考面到地球中心的距离。 这种几何形状改变为重力改变后的椭球形会导致全球海洋发生变化。极地带距离地球中心相对较远，而这些新的更高的海拔高度将迫使海水流向赤道。同样，赤道区域将相对更靠近地球中心，并且会受到重力的强烈影响。赤道带重力的增加会把海水拉向赤道，形成一个全球性的赤道海洋。 ELLIPSOID DEM（椭球DEM）ELLIPSOID DEM将地球描述为椭球。尽管沿着每个纬度从椭球表面到地球中心的距离都是相同的，但是每个纬度都有其自己的唯一值，即从每个极点到赤道逐渐增加。为了从另一个角度看待这个椭圆形的地球（其物理形状以表面上任何点到地球质量中心的距离为特征），使用WGS84基准定义生成了一个网格。每个网格单元值代表从表面到地球质心的距离（以米为单位）。应用了三角函数的复杂组合来创建椭球的表示形式。然后将代表地球当前浮雕的DEM添加到椭圆形栅格中。 WGS84椭球的长轴和短轴之间的差为42,770米。赤道半径与两极之一的半径长度之差为21,385米-仅占半径的0.33％。从几何学上讲，地球的“扁平化”相对来说微不足道，但是就地理而言，它具有巨大的影响。 如果地球静止不动如果地球停止自转并且离心作用不再迫使海洋在赤道周围积聚，将会发生什么？看来世界海洋将分裂为两个极地海洋，而赤道区域将完全干燥。为了对此假设建模，指定了6,371,146米的值（距地球中心的距离表示参考椭球上的海平面的近似高度），以将水与土地分开。对于此“假设假设”模拟，海平面的升高是基于这样的假设，即海水量将与今天的水平大致相同。 冰川融化回到地球的大地水准面表示法，再进行一次模拟，模拟所有冰川融化的地球。如果全球变暖导致南极和格陵兰的大型冰川（目前覆盖所有土地的大约10％）融化，那么该模拟可能会预测未来只有几百年的距离。如果这些冰川中的水全部释放，MSL将比当前水位上升约80米。 结论GIS使探索地球形状的不同概念化的影响以及对各种全球条件进行建模成为可能。 理论结论GPS高=椭球高=大地高：点到椭球面的距离。大地水准面高=正高：点到大地水准面的距离，大地水准面=重力等位面，无法全部测量。似大地水准面高=正常高：点到似大地水准面的距离，由于大地水准面无法测量，只能尽可能多的选点进行测量，生成似大地水准面。在海面上可以认为似大地水准面和大地水准面重合，而越是起伏大的地区，地球质量越不均匀，差异就越大，需要更多的控制点校正。 版权声明：除非注明，本博文章均为原创，转载请以链接形式标明本文地址。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"科普","slug":"科普","permalink":"https://tanghaojie.github.io/categories/科普/"},{"name":"GIS","slug":"科普/GIS","permalink":"https://tanghaojie.github.io/categories/科普/GIS/"}],"tags":[{"name":"科普","slug":"科普","permalink":"https://tanghaojie.github.io/tags/科普/"},{"name":"GIS","slug":"GIS","permalink":"https://tanghaojie.github.io/tags/GIS/"}],"author":null},{"title":"DJI照片元数据主要信息列表","slug":"DJI-XMP-Meta-Data-Info-Explain","date":"2020-11-25T12:34:21.000Z","updated":"2020-11-26T06:28:37.853Z","comments":true,"path":"2020/11/25/DJI-XMP-Meta-Data-Info-Explain/","link":"","permalink":"https://tanghaojie.github.io/2020/11/25/DJI-XMP-Meta-Data-Info-Explain/","excerpt":"","text":"字段 说明 ModifyDate=”2018-08-09” 照片修改日期 CreateDate=”2018-08-09” 照片创建日期 Make=”DJI” 制造商 Model=”FC6310R” 相机型号 format=”image/jpg” 照片格式 AbsoluteAltitude=”+150.09” 相机的绝对高度，基于使用的椭球模型（通常为WGS84或CGCS2000）。 RelativeAltitude=”+109.86” 基于原点（起飞点）的摄像机的相对高度。 GpsLatitude=”22.63093244” 相机位置的纬度，在北正南负，单位：度。 GpsLongtitude=”113.93793694” 相机位置的经度，单位：度。 GimbalRollDegree=”+0.00” 云台侧倾角（在东北地面框架中，北为真北） GimbalYawDegree=”-38.00” 云台偏航角（在东北地面框架中，北为真北） GimbalPitchDegree=”-89.90” 云台俯仰角（在东北地面框架中，北为真北） FlightRollDegree=”+4.70” 无人机侧倾角（在东北地面框架中，北为真北 FlightYawDegree=”-36.10” 无人机偏航角（在东北地面框架中，北为真北） FlightPitchDegree=”+0.80” 无人机云台俯仰角（在东北地面框架中，北为真北） FlightXSpeed=”+6.60” 北方地面速度（m / s） FlightYSpeed=”-5.20” 东方地面速度（m / s） FlightZSpeed=”+0.00” 垂直地面速度（m / s） CalibratedFocalLength=”3666.666504” 镜头的设计焦距，单位：像素。 CalibratedOpticalCenterX=”2736.000000” 光学设计位置的X轴坐标中心，单位：像素。 CalibratedOpticalCenterY=”1824.000000” 光学设计位置的Y轴坐标中心，单位：像素。 RtkFlag=”50” RTK状态。（前面文章有说明）大疆/千寻卫星后处理解算信息说明 RtkStdLon=”0.01160” 照片记录的标准偏差（以米为单位）在经度方向上的位置。当标准图像的偏差大于0.1，为建议不要使用此照片。 RtkStdLat=”0.01095” 照片记录的标准偏差（以米为单位）在纬度方向上的位置。当标准图像的偏差大于0.1，为建议不要使用此照片。 RtkStdHgt=”0.02918” 照片记录的标准偏差（以米为单位）在高度方向上的位置。当标准图像的偏差大于0.1，为建议不要使用此照片。 DewarpData= “… …” 畸变纠正参数。（前面文章有说明）相机内参和畸变校正参数说明 版权声明：除非注明，本博文章均为原创，转载请以链接形式标明本文地址。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[],"author":null},{"title":"metashape-cluster","slug":"metashape-cluster","date":"2020-11-10T13:23:19.000Z","updated":"2020-11-10T09:00:12.177Z","comments":true,"path":"2020/11/10/metashape-cluster/","link":"","permalink":"https://tanghaojie.github.io/2020/11/10/metashape-cluster/","excerpt":"","text":"1.所有电脑在同一局域网，设置固定IP地址，使用千兆交换机（如果只有两台设备，可以采用网线直连）。2.共享网络文件夹，右键需共享的工程目录文件夹，选择属性-共享，选择everyone，点击共享。选择高级共享，打勾共享文件夹，点击权限，选择everyone，权限选择完全控制。3.打开软件，菜单栏工具——偏好设置——网络，勾选network，填入服务端IP地址（不能使用127.0.0.1）和项目所在目录（就是上面共享的目录）。4.作为服务端的电脑，打开cmd，输入（不能出现中文字符）：“C\\Program Files\\Agisoft\\Metashape Pro\\Metashape.exe” --server --control 192.168.0.1:5840 --dispatch 192.168.0.1:5841。也可以把这段话保存成：server.bat文件，打开就自动执行了。5.作为节点的电脑，打开cmd，输入（不能出现中文字符）：\"C:\\Program Files\\Agisoft\\Metashape Pro\\Metashape.exe\" --node --dispatch 192.168.0.1:5841 --root \\\\DESKTOP-PC\\Cluster，–dispatch参数要一样，–root就是保存项目所有文件的共享文件夹，共享目录名用计算机名的形式，别用ip形式。同样也可以保存成：node.bat，方便使用。6.打开Agisoft Network Monitor，输入主机的ip和端口，点击connect，就可以查看连接的电脑了。7.打开软件，按照正常流程创建工程后保存，一定要保存到共享目录下面。之后进行运算的时候软件会询问是否通过集群进行计算。 版权声明：除非注明，本博文章均为原创，转载请以链接形式标明本文地址。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[],"author":null},{"title":"Agisoft photoscan/metashape 使用教程","slug":"metashape-workflow","date":"2020-11-10T11:51:49.000Z","updated":"2020-11-10T08:21:30.799Z","comments":true,"path":"2020/11/10/metashape-workflow/","link":"","permalink":"https://tanghaojie.github.io/2020/11/10/metashape-workflow/","excerpt":"","text":"Photoscan，新版本改名叫Metashape了，相较于context capture（smart3d）进行空三计算效果更好，速度更快，配置更灵活，空三结果可以导入context capture进行三维重建。因此，我经常使用Metashape进行空三处理和DOM生成，然后再用cc进行三维重建，可以显著提高处理速度。而且两个软件都支持集群处理，所需环境保持一致也不会冲突。下面开始作业流程。 导入照片，POS，准确性调整1.如果您在EXIF标签中存储了位置精度：转到“工具”菜单-&gt;“首选项…”-&gt;“高级”选项卡，然后选中“从XMP元数据加载相机位置精度”。2.在Metashape中添加照片：“工作流程”-&gt;“添加照片…”。3.如果是没有POS的照片：导入相机位置。通过单击“参考”窗口中的“导入”按钮导入POS。确保为文件选择正确的列。如果文件包含角度数据，请选中“加载角度”复选框，然后选择右列。选择存储相机位置的坐标系。如果您有精度估算，也可以加载它们。4.如果您的相机相对无人机机头存在旋转，则需要在“工具”-&gt;“相机校准…”下指定。在“GPS/INS偏移”标签下，将“偏转（度）”​​指定为90或您旋转的角度。5.检查设置。单击“参考”窗口中的“设置”按钮。如果您使用的是方向数据，但尚未导入方向精度，则建议您在不确定是否具有比其更好的精度的情况下，将精度提高到10-20度。 照片质量1.Metashape可以自动估计照片质量。建议禁用质量值小于0.5个单位的图像，并将其排除在摄影测量处理之外。2.通过在参考窗口中右键单击照片，选择“估计图像质量…”，然后选择“所有相机”，可以估计图像质量。3.要显示照片的估计图像质量，请在“照片”窗格中将查看模式更改为“详细信息”。4.您现在可以按“质量”列进行排序。选择质量低于0.5的照片并将其禁用。 对齐照片1.对齐您的照片：“工作流程”-&gt;“对齐照片…”。将“精度”设置为“高”（只需要DOM、DSM、DEM，不需要高精度模型的时候，用“低”就完全够了），将“成对预选”设置为“参考”。您也可以使用“最高”，但是会花费更长的时间。阅读手册中的准确度等级是什么意思。可能有必要调整“关键点”和“联系点”限制，以加快处理速度。“自适应相机模型拟合”将使Metashape根据其可靠性估算值来选择应包含在调整中的相机参数。2.对齐完成后，浏览照片，然后依次取消选中和禁用照片块。完成此操作后，运行“优化摄像机…”。勾选：f，cx，cy，k1，k2，k3，p1，p2。3.在继续之前，请复制您的块。如果在以下步骤中出现问题，则可以返回到副本。4.使用手动选择工具删除稀疏点云中明显的离群点。然后运行“优化相机…”（勾选：f，cx，cy，k1，k2，k3，p1，p2）。5.使用“模型”菜单下的“逐步选择…”。向过滤器推荐一定的值是很困难的，最好的方法是遍历这些过滤器以实现误差很小的点云。指定的值应视为建议值，并且取决于数据的质量。使用以下过滤器： 图像计数。如果您的数据应该覆盖两张以上的照片（例如，打开的区域和清晰的区域），请使用此选项。然后，您可以使用图像计数=2，对于地面植被比较多的数据，请跳过这一步。使用与以前相同的参数运行“优化摄像机…”。 重建不确定性（几何形状）。使用滑块调整合适的值以选择不确定性高的点。推荐值：50到25。按OK，然后按键盘上的Delete删除点。使用与以前相同的参数运行“优化摄像机…”。重复至少2次。 投影精度（像素匹配误差）。使用滑块调整合适的值以选择不确定性高的点。推荐值：10到8。按OK，然后按键盘上的Delete删除点。使用与以前相同的参数运行“优化摄像机…”。重复此过滤器和优化过程至少2次。 选中所有参数后，“优化相机…”。 如果您有地面控制点（GCP），请先将其导入，然后再继续进行下一步（重新投影错误）。请参阅下文，了解如何导入GCP。 重投影误差（像素残留误差）。使用滑块调整合适的值以选择不确定性高的点。推荐值：1到0.5。按OK，然后通过按键盘上的Delete删除点。选中所有参数，运行“优化摄像机…”。重复至少2次。 地面控制点（GCP）仅当您已采集地面控制点时才执行此步骤。1.如果地面控制点（GCP）与图像位于不同的坐标系中，则现在需要在导入之前将项目转换为与GCP相同的坐标系。单击“参考”窗口中的“转换”按钮即可完成此操作。（新版本已经支持照片、地面控制点采用各自独立的坐标系）2.通过单击“参考”窗口中的“导入”按钮导入GCP。3.每个GCP（甚至照片）的精度可以通过三种不同的方式设置：x，y和z的精度为0.1m：0.1。x和y的精度为0.1m，z精度为0.5m：0.1/0.5。x的精度为0.1m，y的精度为0.2m，z的精度为0.5m：0.1/0.2/0.5。4.刺点。您可以右键单击GCP，然后选择“按选择过滤照片…”。您可以使用“向上翻页”和“向下翻页”键在照片之间切换。将每个标记至少放置在两张照片中。时常运行“优化相机…”以改善未放置标记的位置。5.“优化相机…”。如果您的GCP精度很高，则应先取消选中所有照片，然后再单击“优化相机…”。确保已检查所有要使用的GCP，并且它们具有正确的精度设置。对于使用DJI无人驾驶飞机拍摄的照片，其海拔质量不佳，因此，在运行“优化相机…”并进行处理之前，应始终取消选中照片（至少适用于2018年之前的DJI无人机）。6.完成上述步骤后，GCP中的误差应该很小（如果使用RTK GNSS接收器，则误差约为5-20厘米）。 密集点云和正射照片1.现在，您可以执行以下命令来执行批处理脚本，也可以一个接一个地运行它们。2.建立密集的云（如果不进行模型重建可以不进行这一步）。使用“高”质量（很少使用“超高”，因为它需要很长时间，并且通常照片的质量不高。请阅读手册中的更多内容）。将深度过滤设置为“轻微”。3.构建网格（通常从稀疏云中生成）。4.平滑网格（工具-&gt;网格-&gt;平滑网格）。5.使用稀疏云中的网格创建正射照片。6.例如，将正照片导出为tif。 版权声明：除非注明，本博文章均为原创，转载请以链接形式标明本文地址。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[],"author":null},{"title":"大疆/千寻卫星后处理解算信息说明","slug":"DJI-PPK-Format-Meaning","date":"2020-11-05T13:01:37.000Z","updated":"2020-11-05T03:13:14.019Z","comments":true,"path":"2020/11/05/DJI-PPK-Format-Meaning/","link":"","permalink":"https://tanghaojie.github.io/2020/11/05/DJI-PPK-Format-Meaning/","excerpt":"","text":"大疆PPK文件也是用的千寻解算，格式一样。 列字段 单位 说明 Station - 轨迹点序列 Timestamp(ms) 毫秒 UTC时间戳 GPSWeek - GPS周 TOW(s) 秒 周内秒 Latitude(deg) 度 纬度 Longitude(deg) 度 经度 H-Ell(m) 米 椭球高程 X(m) 米 高斯平面坐标系 X（如果指定『中央子午线』则有此输出字段） Y(m) 米 高斯平面坐标系 Y（如果指定『中央子午线』则有此输出字段） SDNorth(m) 米 北方向标准差 SDEast(m) 米 东方向标准差 SDHeight(m) 米 高程标准差 Q - 解算质量标志位：1：固定解(大疆：50)；2：浮点解(大疆：34)；3：单点解(大疆：16)；4：未解出(大疆：0)； 版权声明：除非注明，本博文章均为原创，转载请以链接形式标明本文地址。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[],"author":null},{"title":"相机内参和畸变校正参数说明","slug":"camera-calibrate","date":"2020-09-29T10:31:25.000Z","updated":"2020-09-30T06:47:30.949Z","comments":true,"path":"2020/09/29/camera-calibrate/","link":"","permalink":"https://tanghaojie.github.io/2020/09/29/camera-calibrate/","excerpt":"","text":"以大疆Phantom4RTK为例，以记事本方式打开任意一张照片，搜索DewarpData，可以看到校正参数：drone-dji:DewarpData=\" 2020-05-13;3714.070000000000,3707.070000000000,-8.280000000000,-17.520000000000,-0.279234000000,0.125598000000,0.001187790000,-0.000255019000,-0.041078200000\" 值顺序为：calibrate_date;fx,fy,cx,cy,k1,k2,p1,p2,k3 分别的意思： 字段 说明 calibrate_date 校正时间 fx 以像素为单位标定出的焦距x坐标 相机像素焦距则为： (fx + fy) / 2 像素 fy 以像素为单位标定出的焦距y坐标 相机毫米焦距则为：（Phantom4rtk一像元尺寸2.4微米）(fx + fy) / 2 * (2.4 * 0.001) 毫米 cx 以像素为单位标定出的像主点（原点为影像中心）x坐标 建图软件（Pix4D、Context Capture等）默认原点为影像左上角，所以要换算到影像中心。以Phantom4rtk为例，若照片比例为3:2，则像素为5472 * 3648。（4:3同理，像素为4864 * 3648） cy 以像素为单位标定出的像主点（原点为影像中心）y坐标 像主点x = 5472 / 2 + cx；像主点y = 3648 / 2 + cy。 k1 径向畸变校正参数k1 k2 径向畸变校正参数k2 k3 径向畸变校正参数k3 p1 切向畸变校正参数p1 p2 切向畸变校正参数p2 在线畸变参数计算器 版权声明：除非注明，本博文章均为原创，转载请以链接形式标明本文地址。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[],"author":null},{"title":"DJI大疆PPK后差分处理文件导入像控预处理","slug":"dji-ppk-file-process","date":"2020-09-22T11:08:38.000Z","updated":"2020-09-22T09:16:44.742Z","comments":true,"path":"2020/09/22/dji-ppk-file-process/","link":"","permalink":"https://tanghaojie.github.io/2020/09/22/dji-ppk-file-process/","excerpt":"","text":"影像文件名前缀 选择大疆PPK原始文件[result.csv] function handleUpload(e) { var file = e.target.files[0] fileReader.readAsText(file) } function handleCsv(csv) { let lines = csv.split(/[\\n]/) let count = lines.length let output = [] let prefix = document.querySelector('#prefix').value for (let i = 1; i < count; i++) { let line = lines[i] if (line === '' || line === null || line === undefined) { break } let datas = line.split(',') let id = datas[0] let latitude = datas[3] let longitude = datas[4] let height = datas[5] let Q = datas[9] if (Q !== '50') { alert('Some data not fixed!') } output.push(id) output.push(',') output.push(latitude) output.push(',') output.push(longitude) output.push(',') output.push(height) output.push(',') output.push(prefix) output.push(id.padStart(4, '0')) output.push('.JPG') output.push('\\r\\n') } return output.join('') } function saveFile(data, filename) { var file = new Blob([data]) console.log(file) if (window.navigator.msSaveOrOpenBlob) { // IE10+ window.navigator.msSaveOrOpenBlob(file, filename) } else { // Others var a = document.createElement('a'), url = URL.createObjectURL(file) a.href = url a.download = filename document.body.appendChild(a) a.click() setTimeout(function () { document.body.removeChild(a) window.URL.revokeObjectURL(url) }, 0) } } let fileReader = new FileReader() fileReader.onload = function () { let result = this.result let newCsv = handleCsv(result) let nowDate = new Date() let year = nowDate.getFullYear() let month = (nowDate.getMonth() + 1).toString().padStart(2, '0') let day = nowDate.getDate().toString().padStart(2, '0') let dateStr = year + '-' + month + '-' + day saveFile(newCsv, 'result_JTEdited' + dateStr + '.csv') } let contained = document.querySelector('#contained') contained.addEventListener('change', handleUpload) 显示效果不好，点击下面打开单独的网页 独立网页的版本 版权声明：除非注明，本博文章均为原创，转载请以链接形式标明本文地址。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[],"author":null},{"title":"QGIS将文件夹中的所有Esri Shape转换为KML文件的python处理代码","slug":"qgis-shp2kml-py","date":"2020-09-22T11:07:42.000Z","updated":"2020-09-22T09:11:08.590Z","comments":true,"path":"2020/09/22/qgis-shp2kml-py/","link":"","permalink":"https://tanghaojie.github.io/2020/09/22/qgis-shp2kml-py/","excerpt":"","text":"import os dir = r'C:\\Users\\YourFolderPathContainShapefile' toDir = r'C:\\Users\\YourFolderPathKMLWillOutput' crs = QgsCoordinateReferenceSystem(4326) list = os.listdir(dir) for l in list: if not l.endswith('.shp'): continue inPath = os.path.join(dir, l) vl = QgsVectorLayer(inPath, l, 'ogr') valid = vl.isValid() if not vl.isValid(): print(inPath) print('invalid') continue toFile = os.path.join(toDir, l.replace('.shp', '.kml')) QgsVectorFileWriter.writeAsVectorFormat(vl, toFile, 'utf-8', crs, 'kml') 版权声明：除非注明，本博文章均为原创，转载请以链接形式标明本文地址。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[],"author":null},{"title":"QGIS添加各大地图服务的插件","slug":"qgis-add-map-services","date":"2020-09-22T10:43:43.000Z","updated":"2020-09-22T09:10:56.392Z","comments":true,"path":"2020/09/22/qgis-add-map-services/","link":"","permalink":"https://tanghaojie.github.io/2020/09/22/qgis-add-map-services/","excerpt":"","text":"在插件中搜索并安装QuickMapServices插件，然后打开插件的Settings -&gt; More Services，点击Get contributed pack获得所有服务，就可以用添加添加各种地图服务了。 版权声明：除非注明，本博文章均为原创，转载请以链接形式标明本文地址。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[],"author":null},{"title":"华测、中海达等用RTK进行PPK后差分解算测量","slug":"rtk-ppk","date":"2020-09-04T13:27:39.000Z","updated":"2020-09-04T09:30:49.962Z","comments":true,"path":"2020/09/04/rtk-ppk/","link":"","permalink":"https://tanghaojie.github.io/2020/09/04/rtk-ppk/","excerpt":"","text":"华测、中海达等这些厂商都开始提供PPK后差分解算软件了。使用很简单，先得到1个（3个最好）的已知点，然后RTK设置为静态模式架设不动。无人机或者其他设备用PPK模型进行测绘，之后就可以用软件解算了。 版权声明：除非注明，本博文章均为原创，转载请以链接形式标明本文地址。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[],"author":null},{"title":"大疆精灵Phantom4RTK PPK文件说明","slug":"phantom4RTK-ppk-file-formate","date":"2020-09-04T12:48:40.000Z","updated":"2020-09-04T09:26:43.133Z","comments":true,"path":"2020/09/04/phantom4RTK-ppk-file-formate/","link":"","permalink":"https://tanghaojie.github.io/2020/09/04/phantom4RTK-ppk-file-formate/","excerpt":"","text":"EVENTLOG.bin 二进制格式的曝光时间戳记录文件 PPKRAW.bin RTCM3.2MSM5格式的移动端卫星观测值数据及星历数据 PPKRAW.sig 官方没解释，猜测是signature。身份校验文件，用于校验是否为该飞行器生成的数据，如为非该飞行器生成的数据将无法加载。 Rinex.obs 实施转码出的Rinex观测值文件 Timestamps.MRK ASCII格式的明码曝光时间戳，每张照片拍照时刻定位结果，拍照时刻定位状态，定位标准差，拍照时刻等记录文件。格式说明： 第一列照片的编号第二列每张照片曝光时刻的UTC时间，以GPS时间格式表示时的周内秒部分。第三列每张照片曝光时刻的UTC时间，以GPS时间格式表示时的GPS周部分。第四列每张照片曝光时刻瞬间天线相位中心到相机CMOS传感器中心的在北方向（N）的偏差，单位为毫米，CMOS中心在天线相位中心偏北方向为正，偏南方向为负。第五列每张照片曝光时刻瞬间天线相位中心到相机CMOS传感器中心的在东方向（E）的偏差，单位为毫米，CMOS中心在天线相位中心偏东方向为正，偏西方向为负。第六列每张照片曝光时刻瞬间天线相位中心到相机CMOS传感器中心的在垂直方向（V）的偏差，单位为毫米，CMOS中心在天线相位中心偏下为正，偏上为负。第七列曝光时刻获取的CMOS中心的实时位置纬度（Lat），单位为度。当飞机定位处于RTK模式下时，此时的位置为RTK位置加上曝光时刻天线相位中心到CMOS中心的位置，精度为RTK精度（厘米级）；当飞机定位处于GPS模式下时，此时的位置为GPS单点定位位置加上曝光时刻天线相位中心到CMOS中心的位置，精度为GPS单点定位的精度（米级）第八列曝光时刻获取的CMOS中心的实时位置经度（Lon），单位为度。第九列曝光时刻获取的CMOS中心的实时高度，单位为米。该高度为大地高（俗称椭球高），（用户自行定义其椭球模型，默认为WGS84，用户可以通过接入不同的CORS站系统/基准，设定其为其他椭球，如CGCS2000）表面的高度。注意，此高度并非基于国家85高程基准或56高程基准（正常高），也并非基于全球范围内比较通用的EGM96/2008高程基准（正高）。第十至十二列北、东、天三个方向定位结果的标准差，表征在三个方向上定位的相对精度。单位为米第十三列（很常用）RTK状态位： 0-无定位 16-单点定位模式 34-RTK浮点解 50-RTK固定解当某张照片标志位不为50的时候，不推荐使用此照片直接进行建图。 版权声明：除非注明，本博文章均为原创，转载请以链接形式标明本文地址。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[],"author":null},{"title":"无人机多层航线建模失败解决方案","slug":"uav-multi-height-route","date":"2020-09-04T12:27:05.000Z","updated":"2020-09-04T08:47:44.704Z","comments":true,"path":"2020/09/04/uav-multi-height-route/","link":"","permalink":"https://tanghaojie.github.io/2020/09/04/uav-multi-height-route/","excerpt":"","text":"无人机航测的过程中，经常会碰到空中环境太恶劣，无法正常飞行的情况。一般的做法都是先做一个超高空飞行，保证覆盖范围和整体约束，然后对特征地物、居民地、建筑物等，进行超低空飞行作为补充，这样就避开了空中混乱的位置。但问题是超高空和超低空之间重叠率很难保证，导致建模的时候经常遇到问题。最常见的就是只使用高空照片做特征点匹配，低空的高清晰度照片被抛弃；或者高低空照片混用，一块模糊一块清晰，成像不统一。针对这种情况，一般有几种解决方案： 1.建模时从高空照片中剔除低空覆盖的部分。（边缘还是要留下，保证有重叠率来识别）2.条件允许时扩大低空航线范围，提高低空重叠率。3.高低空照片分别建模，建模完成以后再合模。4.如果用context capture建模，手动添加连接点强制匹配。5.如果用context capture建模，建模参数设置为高特征点匹配。 版权声明：除非注明，本博文章均为原创，转载请以链接形式标明本文地址。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[],"author":null},{"title":"地面采样距离(GSD)计算器","slug":"gsd-calculator","date":"2020-08-14T07:39:31.000Z","updated":"2020-08-14T09:00:20.584Z","comments":true,"path":"2020/08/14/gsd-calculator/","link":"","permalink":"https://tanghaojie.github.io/2020/08/14/gsd-calculator/","excerpt":"","text":"独立网页的版本 版权声明：除非注明，本博文章均为原创，转载请以链接形式标明本文地址。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[],"author":null},{"title":"qgis速记","slug":"post","date":"2020-08-12T14:15:05.000Z","updated":"2020-08-14T08:31:28.319Z","comments":true,"path":"2020/08/12/post/","link":"","permalink":"https://tanghaojie.github.io/2020/08/12/post/","excerpt":"","text":"按照几何位置排序，其中45代表东北方向，其他方向排序可以自己指定，y正轴（北）方向为0度，顺时针旋转 sin(45) * x(centroid($geometry)) + cos(45) * y(centroid($geometry))字段长度不足补0，3是长度，0是不足的左侧补0 lpad(\"你的字段名\", 3, '0') 版权声明：除非注明，本博文章均为原创，转载请以链接形式标明本文地址。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[],"author":null},{"title":"jenkins从github拉取nuxt项目部署到docker, windows平台","slug":"nuxt-docker","date":"2020-06-10T14:15:05.000Z","updated":"2020-08-14T08:29:07.488Z","comments":true,"path":"2020/06/10/nuxt-docker/","link":"","permalink":"https://tanghaojie.github.io/2020/06/10/nuxt-docker/","excerpt":"","text":"准备环境 开发环境：win10 服务器 docker 宿主环境：win10 docker 环境：linux jenkins 部署环境：docker 配置 jenkins 插件：github、git、publish over ssh。提前要在全局工具配置里面配置 git，系统配置里面配置 github server、publish over SSH。这常用工具网上都有教程，不单独说了。有一个坑是，publish over SSH 连接 OpenSSH for windows，我用 key 始终不行， 点下面高级，用户名密码模式搞定的。 服务器 win10：OpenSSH for windows这个需要在你的 win10 服务器上配置，网上很多，我也是照着网上做的。 docker：node 镜像我用的 node 官方镜像生产的自己的镜像，你可以用自己习惯的。把 node 容器运行起来，docker exec -it YourName /bin/bash进入容器，执行npm install -g cnpm --registry=https://registry.npm.taobao.org配置淘宝源，新建 /app文件夹，之后代码构建和发布就都放这里了。然后把这个容器打包成镜像，名字随便，就叫mynode:latest（仓库：版本）。 开始 jenkins：1.新建任务。2.勾选 github 项目：填写地址：git@github.com:YourName/YourProject.git。3.源码管理：选择 git，url 和上面一样，设置 Credentials，如果是 public 项目就不用设置。4.轮询 SCM 或者 GitHub hook 自己看着办。5.构建：选择执行 shell，命令写：tar -zcvf frontend.tar.gz *，意思是把所有代码打包到frontend.tar.gz。6.构建：选择 Send files or execute commands over SSH。6.1 SSH Server 选择之前配置好的。6.2 Source files：frontend.tar.gz。6.3 Remote directory：/（注意这个根目录是你之前配置好的 SSH Server 连接到的目录，比如你之前配置的/d:/docker/，那么这里就会把 frontend.tar.gz 上传到 d:/docker/frontend.tar.gz。windows SSH 连接 D 盘就是这么写的/D:/前面有个/）6.4 Exec command：frontend.bat。意思就是执行远端 windows 服务器上的frontend.bat文件，所以去远端服务器的C:\\Users\\Administrator下新建这个frontend.bat文件，Administrator 是你登录的用户名。连接默认就固定这个目录，我尝试了几个办法想把文件放 D 盘执行的，但一直不行，放弃了，frontend.bat里面写什么下面说。7.保存。 nuxt 项目：1.上传代码的时候忽略.nuxt node_modules 等等这些文件，没啥好说的。2.根目录添加Dockerfile。写入： FROM mynode:latest WORKDIR /app COPY . /app RUN cnpm install \\ &amp;&amp; npm run build EXPOSE 3000 CMD [\"npm\", \"run\", \"start\"]简单解释一下，用 mynode （上面准备工作弄好了的）构建新镜像，设置工作目录/app，把当前所有文件拷贝到/app，（在工作目录）执行cnpm install 和 npm run build， 对外访问端口 3000，容器开始运行后（在工作目录）执行npm run start。这里构建发布容器，设置依赖，运行就弄好了。之后就是去 windows 服务器上执行脚本，每次构建之前删除旧的，运行新的。 服务器脚本（frontend.bat）：直接上内容： d: # 切换到d盘 cd docker # 到d:/docker这个文件夹 rd /S /Q frontend # 删除d:/docker下，frontend这个文件夹 mkdir frontend # 新建 frontend 文件夹 tar -xvf frontend.tar.gz -C ./frontend # 解压jenkins打包上传过来的文件到frontend文件夹 cd frontend # 到d:/docker/frontend这个文件夹 docker stop frontend # 停止已运行容器 docker rm -v frontend # 删除已存在容器 docker image rm frontend # 删除镜像 docker build -t frontend:latest . # 运行Dockerfile打包生成新镜像：frontend:latest，注意最后有一个点，表示用当前目录下的Dockerfile来执行的 docker run -itd --restart=always --name frontend -p 3000:3000 frontend:latest # 运行容器到这里就全部完成了。去 jenkins 立即构建就 ok 了。 版权声明：除非注明，本博文章均为原创，转载请以链接形式标明本文地址。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[],"author":null},{"title":"git commit规范化，设置Commitizen，符合Angular的规范","slug":"git-commitizen","date":"2020-05-15T12:24:09.000Z","updated":"2020-05-15T06:48:05.769Z","comments":true,"path":"2020/05/15/git-commitizen/","link":"","permalink":"https://tanghaojie.github.io/2020/05/15/git-commitizen/","excerpt":"","text":"安装配置commitizen地址cz-conventional-changelo地址：规范要求，不同的适配器要求不同conventional-changelog地址：生成changelog.md npm install -g commitizen npm install -g cz-conventional-changelog npm install -g conventional-changelog-cli commitizen init cz-conventional-changelog --save-dev --save-exact如果已经有其他适配器了，会报错，用 --force 替换掉，即： commitizen init cz-conventional-changelog --save-dev --save-exact --force使用以后提交代码就用git cz -m替代git commit -m就好了，或者不输入message跟着提示走就没问题。type值： 值 描述 feat 新增一个功能 fix 修复一个Bug docs 文档变更 style 代码格式（不影响功能，例如空格、分号等格式修正） refactor 代码重构 perf 改善性能 test 测试 build 变更项目构建或外部依赖（例如scopes: webpack、gulp、npm等） ci 更改持续集成软件的配置文件和package中的scripts命令，例如scopes: Travis, Circle等 chore 变更构建流程或辅助工具 revert 代码回退 生成changelog：conventional-changelog -p angular -i CHANGELOG.md -s 版权声明：除非注明，本博文章均为原创，转载请以链接形式标明本文地址。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[],"author":null},{"title":"docker速查表","slug":"docker-cheat-sheet","date":"2020-05-14T16:50:41.000Z","updated":"2020-05-15T07:16:10.286Z","comments":true,"path":"2020/05/15/docker-cheat-sheet/","link":"","permalink":"https://tanghaojie.github.io/2020/05/15/docker-cheat-sheet/","excerpt":"","text":"容器（Container）生命周期 docker create 创建容器但不启动它。 docker rename 用于重命名容器。 docker run 一键创建并同时启动该容器。 docker rm 删除容器。 docker update 调整容器的资源限制。 常用参数docker run --rm 临时容器，容器停止之后删除它。docker run -d container_id，-d 表示自动将容器与终端分离（也就是说在后台运行容器，并输出容器 ID）docker run -p container_id，-p 表示指定端口映射，格式：主机（宿主）端口:容器端口 启动和停止 docker start 启动已存在的容器。 docker stop 停止运行中的容器。 docker restart 重启容器。 docker pause 暂停运行中的容器，将其「冻结」在当前状态。 docker unpause 结束容器暂停状态。 docker wait 阻塞地等待某个运行中的容器直到停止。 docker kill 向运行中的容器发送 SIGKILL 指令。 docker attach 连接到运行中的容器。 信息 docker ps 查看运行中的所有容器。 docker logs 从容器中读取日志。（你也可以使用自定义日志驱动，不过在 1.10 中，它只支持 json-file 和 journald）。 docker inspect 查看某个容器的所有信息（包括 IP 地址）。 docker events 从容器中获取事件 (events)。 docker port 查看容器的公开端口。 docker top 查看容器中活动进程。 docker stats 查看容器的资源使用量统计信息。 docker diff 查看容器文件系统中存在改动的文件。 常用参数docker ps -a 显示所有容器，包括运行中和已停止的。docker stats --all 同样将显示所有容器，默认仅显示运行中的容器。 导入 / 导出 docker cp 在容器和本地文件系统之间复制文件或目录。 docker export 将容器的文件系统打包为归档文件流 (tarball archive stream) 并输出至标准输出 (STDOUT)。 执行命令 docker exec 在容器内执行命令。 例如，进入正在运行的 foo 容器，并连接 (attach) 到一个新的 Shell 进程：docker exec -it foo /bin/bash。 镜像(Images)生命周期 docker images 查看所有镜像。 docker import 从归档文件创建镜像。 docker build 从 Dockerfile 创建镜像。 docker commit 为容器创建镜像，如果容器正在运行则会临时暂停。 docker rmi 删除镜像。 docker load 从标准输入 (STDIN) 加载归档包 (tar archive) 作为镜像，包括镜像本身和标签 (tags, 0.7 起)。 docker save 将镜像打包为归档包，并输出至标准输出 (STDOUT)，包括所有的父层、标签和版本 (parent layers, tags, versions, 0.7 起)。 其它信息 docker history 查看镜像的历史记录。 docker tag 给镜像打标签命名（本地或者仓库均可）。 网络(Networks)生命周期 docker network create docker network rm 其它信息 docker network ls docker network inspect 建立连接 docker network connect docker network disconnect 仓库(Repository) docker login 登入仓管中心。 docker logout 登出仓管中心。 docker search 从仓管中心检索镜像。 docker pull 从仓管中心拉取镜像到本地。 docker push 从本地推送镜像到仓管中心。 版权声明：除非注明，本博文章均为原创，转载请以链接形式标明本文地址。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[],"author":null},{"title":"git速查表","slug":"git-cheat-sheet","date":"2020-05-14T08:20:07.000Z","updated":"2020-08-14T08:31:09.178Z","comments":true,"path":"2020/05/14/git-cheat-sheet/","link":"","permalink":"https://tanghaojie.github.io/2020/05/14/git-cheat-sheet/","excerpt":"","text":"git 从远程拉取代码、推代码的步骤 如果是几个人共同管理项目，并且你的队友在你之前推过代码，那你就需要 git pull 一下，把代码拉到本地，解决一下冲突，再执行以下步骤，将本地代码推到远程仓库。 git status #git仓库状态 git add * #更新的代码添加到暂存区 git commit -m “msg” #将暂存区的更新提交到仓库区 git pull #先git pull,拉取远程仓库所有分支更新并合并到本地 git push origin master #将本地分支的更新全部推送到远程仓库 git reset –mixed [哈希码] #回滚到这个哈希码，将本地归档区和缓冲区也进行回滚 git reset –hard [哈希码] #使用强制还原这个哈希码 git reset –soft [哈希码] #回滚到这个哈希码，只将本地归档区回滚 git revert [哈希码] #只是针对这个哈希码版本进行删除回滚操作 git log #查看日志 git reflog #查看操作记录，能找到之前的操作记录和哈希码 多分支开发 git branch -v #查看我们当前有哪些分支？ git branch [name] #创建name分支 git checkout [name] #切换到name分支 git checkout -b [name] #创建并切换到name分支 git merge [name] 将name分支合并到master分支 查看远端 git remove -v 添加多个远端 git remote set-url –add origin http://xxxxx/xxx/adsdsdsdcelery-demo.git 版权声明：除非注明，本博文章均为原创，转载请以链接形式标明本文地址。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[],"author":null},{"title":"几何算法延伸","slug":"spatial-calculate-extend","date":"2020-05-10T07:10:26.000Z","updated":"2020-05-15T01:28:52.268Z","comments":true,"path":"2020/05/10/spatial-calculate-extend/","link":"","permalink":"https://tanghaojie.github.io/2020/05/10/spatial-calculate-extend/","excerpt":"","text":"线平行$$A_xB_y = A_yB_x$$ $$\\frac{A_x}{A_y} = \\frac{B_x}{B_y}$$ $$\\frac{A_x}{A_y} = \\frac{B_x}{B_y} = \\frac{B_z}{B_z}$$ 线垂直$$A_xB_x + A_yB_y = 0$$ $$A_xB_x + A_yB_y + A_zB_z = 0$$ 向量 $\\vec A$ $\\vec B$ 夹角方向（叉乘）$\\vec A$ $\\times$ $\\vec B$ &gt; 0 , $\\vec A$在$\\vec B$的顺时针方向。$\\vec A$ $\\times$ $\\vec B$ &lt; 0 , $\\vec A$在$\\vec B$的逆时针方向。$\\vec A$ $\\times$ $\\vec B$ = 0 , $\\vec A$ $\\vec B$共线。 判断凸多边形根据上面方向的性质，可以推论出来。以多边形相邻两条边为向量进行叉积和，如果全部大于零则是凸多边形，如果全部为零则共线，否则就是凹多边形。 计算任意多边形面积计算三角形面积根据上一篇几何基础，向量叉乘结果为带符号的平行四边形面积，那么三角形的面积为：$$Area = \\frac{\\vec {AB} \\times \\vec {AC}}{2}$$面积结果为带符号的值，正面积则ABC成左手系，负面积则ABC成右手系。 计算任意凹凸多边形面积计算多边形面积就是把多边形切分为多个三角形计算就好了。由于面积计算的结果是带符号的，因此，此结果对于凹凸多边形都是有效。甚至可以选取多边形外的一个点，来构建三角形计算，也是同样有效的，像这样：当然一般不会选择外部的点。 计算带孔多边形的面积当多边形存在“孔洞”时， 第一层孔洞的环序是与外环序一定是相反的，因此孔洞的面积和外环的面积结果也是相反的，直接相加即可。多层孔洞当然也是一样的道理。注意 环序是很重要的，同一层环进行面积计算的时候，要始终保持同一个方向的环序进行计算。 不同文件格式要求的最外部环序是不一样的，因此不要认为外环总是和大部分情况一样是逆时针的。 扩展1.ESRI shapefile：外层环序为顺时针。2.OGC规范：此标准未定义多边形旋转；实际的多边形旋转可以沿顺时针或逆时针方向进行。3.Oracle：Exterior ring boundaries must be oriented counterclockwise, and interior ring boundaries must be oriented clockwise.（外部环边界必须逆时针定向，而内部环边界必须顺时针定向。）4.SQL Server： If SQL Server finds outer rings oriented in a clockwise direction, it will re-orient such rings to counter-clockwise - the direction required for outer rings in the Geography data type. The same goes for inner rings (holes), which SQL Server will orient to clockwise.（如果SQL Server找到沿顺时针方向定向的外环，则它将重新定位此类环为逆时针方向-Geography数据类型中外环所需的方向。内环（孔）也是如此，SQL Server会将其定位为顺时针方向。）5.PostGIS：Forces the orientation of the vertices in a polygon to follow a Right-Hand-Rule, in which the area that is bounded by the polygon is to the right of the boundary. In particular, the exterior ring is orientated in a clockwise direction and the interior rings in a counter-clockwise direction.（强制多边形中顶点的方向遵循“右手规则”，其中多边形所包围的区域在边界的右边。特别地，外环沿顺时针方向定向，而内环沿逆时针方向定向。） 判断多边形的环序面积法多边形面积为正：逆时针；面积为负：顺时针； 凸多边形任取一点叉乘：$$\\vec {AB} \\times \\vec{BC}$$值为正：逆时针；值为负：顺时针。 极点法选择多边形上的某个极点（x最大、x最小、y最大、y最小），这个极点则一定在凸包上，计算叉积得到环序方向，和上面凸多边形算法结论一致。 计算多边形质心三角形三角形 $\\triangle ABC$ 质心计算公式：$$Centroid_x = \\frac{A_x + B_x + C_x}{3}$$$$Centroid_y = \\frac{A_y + B_y + C_y}{3}$$ 任意多边形任意平面多边形，若能被拆分为 $i$个简单图形，每个简单图形的质心为：$C_i$，面积为：$A_i$。则质心Centroid的坐标$(Centroid_x, Centroid_y)$，满足以下公式：$$Centroid_x = \\frac{\\sum {C_i}_x A_i}{\\sum A_i}$$$$Centroid_y = \\frac{\\sum {C_i}_y A_i}{\\sum A_i}$$ 版权声明：除非注明，本博文章均为原创，转载请以链接形式标明本文地址。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"几何计算","slug":"几何计算","permalink":"https://tanghaojie.github.io/categories/几何计算/"}],"tags":[{"name":"几何计算","slug":"几何计算","permalink":"https://tanghaojie.github.io/tags/几何计算/"}],"author":null},{"title":"几何算法基础","slug":"spatial-calculate-basic","date":"2020-05-10T04:24:04.000Z","updated":"2020-05-15T01:28:52.267Z","comments":true,"path":"2020/05/10/spatial-calculate-basic/","link":"","permalink":"https://tanghaojie.github.io/2020/05/10/spatial-calculate-basic/","excerpt":"","text":"加$$\\vec A + \\vec B = (A_x + B_x, A_y + B_y, A_z + B_z)$$ 减$$\\vec A - \\vec B = (A_x - B_x, A_y - B_y, A_z - B_z)$$ 模$$\\left| \\vec A \\right| = \\sqrt[]{ A_x^2 + A_y^2 + A_z^2 }$$ 数乘（伸缩，换向）$$k \\vec A = (kA_x, kA_y, kA_z)$$ 点乘$$\\vec A \\cdot \\vec B = \\sum A_i B_i = A_xB_x + A_yB_y + A_zB_z$$ $$\\vec A \\cdot \\vec B = \\left| \\vec A \\right| \\left| \\vec B \\right| \\cos \\theta$$ 结果是一个标量（数）几何意义：1.降维，2.$\\vec B$在$\\vec A$上的投影 $$\\left| \\vec B \\right| \\cos \\theta$$ 点乘延伸：$$\\left| \\vec A \\cdot \\vec B \\right| \\le \\left| \\vec A \\right| \\left| \\vec B \\right|$$等号只在$\\vec A$与$\\vec B$共线时成立. $$\\vec A \\cdot \\vec B = \\vec B \\cdot \\vec A$$ $\\vec A \\cdot \\vec B &gt; 0$，夹角在 $0^\\circ$ 到 $90^\\circ$ 之间$\\vec A \\cdot \\vec B = 0$，垂直$\\vec A \\cdot \\vec B &lt; 0$，夹角在 $90^\\circ$ 到 $180^\\circ$ 之间 叉乘$$\\vec A \\times \\vec B = \\left| \\vec A \\right| \\left| \\vec B \\right| \\sin \\theta$$ 二维：$$\\vec A \\times \\vec B = A_xB_y - B_xA_y$$ 三维：$$\\vec A \\times \\vec B = A_yB_z- B_yA_z + A_zB_x - A_xB_z+ A_xB_y - A_yB_x$$ 几何意义：二维：$(0,0) \\quad (A_x, A_y) \\quad (B_x, B_y) \\quad ((A+B)_x, (A+B)_y)$构成的平行四边形带符号的面积三维：$\\vec A \\times \\vec B$ 结果的向量，垂直于 $\\vec A$ 和 $\\vec B$ 构成的平面 叉乘延伸：$$\\left| \\vec A \\times \\vec B \\right| = \\left| \\vec A \\right| \\left| \\vec B \\right| \\sin \\theta$$ $$\\vec A \\times \\vec B = - \\vec B \\times \\vec A$$ 版权声明：除非注明，本博文章均为原创，转载请以链接形式标明本文地址。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"几何计算","slug":"几何计算","permalink":"https://tanghaojie.github.io/categories/几何计算/"}],"tags":[{"name":"几何计算","slug":"几何计算","permalink":"https://tanghaojie.github.io/tags/几何计算/"}],"author":null},{"title":"Hexo添加数学公式支持","slug":"hexo-LaTex","date":"2020-05-10T03:50:01.000Z","updated":"2020-08-14T08:30:49.058Z","comments":true,"path":"2020/05/10/hexo-LaTex/","link":"","permalink":"https://tanghaojie.github.io/2020/05/10/hexo-LaTex/","excerpt":"","text":"为后面的文档做准备，添加数学公式的支持。网上一堆更新渲染插件的办法，我都准备用了。幸好先看完了文章，后面要改node_modules里面的源码，这怎么可能！我不能把node_modules上传到github吧，不上传又怎么同步呢。后来看了一下，hexo-theme-matery做好了插件，那就简单了：themes/hexo-theme-matery/_config.yml中： mathjax: enable: true 完工～就是这么简单，然后每篇要用到公式的文档，头上修改mathjax: true就好了。 示例$\\cos$ $x_i^2$ $|x+y|$ $\\sqrt[3]{x+y}$ $\\int_{r=1}^\\infty$ $\\frac{\\partial x}{\\partial y}$ $$\\Gamma(z) = \\int_0^\\infty t^{z-1}e^{-t}dt,.$$ $\\alpha$ $\\beta$ $\\theta$ $\\sum_{r=1}^n$ $\\prod_{i=1}^{K}$ $$\\begin{bmatrix} a &amp; b &amp; c &amp; d &amp; e\\\\ f &amp; g &amp; h &amp; i &amp; j \\\\ k &amp; l &amp; m &amp; n &amp; o \\\\ p &amp; q &amp; r &amp; s &amp; t \\end{bmatrix}$$ 版权声明：除非注明，本博文章均为原创，转载请以链接形式标明本文地址。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[],"author":null},{"title":"全国甲乙丙级测绘资质单位名单","slug":"surveying-qualification","date":"2020-05-09T15:01:28.000Z","updated":"2020-08-14T08:30:14.636Z","comments":true,"path":"2020/05/09/surveying-qualification/","link":"","permalink":"https://tanghaojie.github.io/2020/05/09/surveying-qualification/","excerpt":"","text":"全国甲乙丙级测绘资质单位名单：甲级：1326个 乙级：5081个 丙级：8790个 点击查看和下载 详细信息压缩包解压密码：关注公众号[桀士]，回复“资质”获取密码。 版权声明：除非注明，本博文章均为原创，转载请以链接形式标明本文地址。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[],"author":null},{"title":"Scrapy爬虫使用","slug":"scrapy-tutorial","date":"2020-05-09T13:20:01.000Z","updated":"2020-05-09T09:53:12.508Z","comments":true,"path":"2020/05/09/scrapy-tutorial/","link":"","permalink":"https://tanghaojie.github.io/2020/05/09/scrapy-tutorial/","excerpt":"","text":"飞速起步 安装scrapypip install Scrapy（类unix记得加 sudo）安装完成以后，到命令行输入Scrapy，查看是否安装成功。 准备和配置 scrapy startproject [name]创建项目。 项目文件说明 items.py：数据模型，类似于dto、orm中的modelspiders：爬虫程序middlewares.py：模型中的中间件pipelines.py：管道，对item进行处理，类似于很多服务器的请求管道settings.py：程序设置,主要是一些优先级设置,优先级越高,值越小scrapy.cfg：配置 基础设置settings.py中，找到ROBOTSTXT_OBEY = True，改为ROBOTSTXT_OBEY = False或者把他注释了这东西的意思是：每个网站可以在根目录下放一个robots.txt的文件，文件里面告诉了爬虫哪些网址是可以爬的，当然这就是个君子协议，靠你自己选择是不是要遵守。 设置UTF-8：settings.py中，添加一行：FEED_EXPORT_ENCODING = 'utf-8' 生成爬虫命令行输入：scrapy genspider [文件名] [网址]，生成爬虫文件。可以在spiders文件夹下面看到。 开始代码 item：自己写一个item class yourItem(scrapy.Item): info1 = scrapy.Field() info2 = scrapy.Field() info1、info2，就是数据模型对应的字段，看scrapy.Item的源码，实际上就是个dict所以可以这样理解： { info1: None, info2: None } spider from name.items import yourItem class YourSpider(scrapy.Spider): name = 'yourname' allowed_domains = ['xxx.com'] start_urls = ['http://xxx.com/yyy/zzz'] def parse(self, response): info1 = response.xpath('//div/a/text()').extract_first() #第一个 info2 = response.xpath('//div/a/text()').extract() #extract 永远返回一个数组 item = yourItem() item['info1'] = info1 item['info2'] = info2 yield item 没啥好说的，就是爬取信息，然后设置item的属性就好。 可以爬了！！命令行输入：scrapy crawl yourname -o filename.csv，yourname 对应 YourSpider 这个类的name变量值。就会爬取数据放到 filename.csv 中，还有其他格式，自己研究。 pipelines如果你不想用scrapy默认的保存文件方法，那么就自定义一个保存文件的管道： class YourPipeline(object): def process_item(self, item, spider): # 伪代码 # open file # file.write(item.info1) # file.write(item.info2) # save and close file return item 之后到settings.py，输入： ITEM_PIPELINES = { 'name.pipelines.YourPipeline': 300, }启动当前管道配置优先级，数字越小，优先级越靠前，然后就只需要输入scrapy crawl yourname就可以运行和保存了 调试我用万能vscode：新建调试配置文件，输入 { \"version\": \"0.2.0\", \"configurations\": [ { \"name\": \"Scrapy\", \"type\": \"python\", \"request\": \"launch\", \"module\": \"scrapy\", \"args\": [ \"crawl\", \"yourname\" ] } ] } 搞定！ 版权声明：除非注明，本博文章均为原创，转载请以链接形式标明本文地址。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"scrapy","slug":"scrapy","permalink":"https://tanghaojie.github.io/categories/scrapy/"},{"name":"python","slug":"scrapy/python","permalink":"https://tanghaojie.github.io/categories/scrapy/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://tanghaojie.github.io/tags/python/"},{"name":"scrapy","slug":"scrapy","permalink":"https://tanghaojie.github.io/tags/scrapy/"}],"author":null},{"title":"QGIS plugin开发使用","slug":"qgis-plugin","date":"2020-04-12T02:17:00.000Z","updated":"2020-08-14T08:30:00.722Z","comments":true,"path":"2020/04/12/qgis-plugin/","link":"","permalink":"https://tanghaojie.github.io/2020/04/12/qgis-plugin/","excerpt":"","text":"起步1.刚来就不建议看文档手动创建plugin了，python很熟悉的人可以看文档试试，否则还是别手动创建了，几乎所有的开发者都是通过Plugin Builder这个Plugin来创建的Plugin，安装好了以后，打开Plugin Builder，根据提示输入内容，一直下一步就创建好了。2.用 pyrcc5 -o resources.py resources.qrc命令，把resources.qrc资源文件转换成py文件，主程序test.py文件中已经自动引入了。如果没有pyrcc5命令，执行pip install PyQt5安装PyQt。3.把整个生成的文件夹，拷贝到，~\\AppData\\Roaming\\QGIS\\QGIS3\\profiles\\default\\python\\plugins 下面，所有的plugin其实都在这里。4.打开qgis插件–已安装，勾选test插件，就可以看到菜单上多了按钮，点击就能打开了。 以上最原始的demo就能够看见了，下面说说怎么自己写代码5.插件有一个test_dialog.py文件，里面最关键的一句代码应该是FORM_CLASS, _ = uic.loadUiType(os.path.join(os.path.dirname(__file__), 'Test_dialog_base.ui'))，这就是加载转换.ui文件给pyqt用的。6.生成的插件文件，包含了Test_dialog_base.ui，就是界面文件。安装QGIS的时候自带了Qt Designer，用Designer就可以打开就能看到和编辑了，这里从左边拖一个Push Button进去，后面用。编辑完成界面，去QGIS里面，取消勾选，在重新选中，就重新加载插件了，能够看出来结果。这里推荐一个插件 Plugin Reloader，不用每次去取消重勾选，它可以帮我们重加载插件。7.点击事件，在.ui文件对应的.py文件的构造函数，__init__中，加上self.pushButton.clicked.connect(self.pushButtonClicked)，文件头导入from PyQt5.QtWidgets import QMessageBox然后定义方法： def pushButtonClicked(self): QMessageBox.warning(None, 'info', '测试') 8.去QGIS里面reload插件，点击按钮就能看到结果了。9.更多的东西就自己尝试咯，你已经入门了。 版权声明：除非注明，本博文章均为原创，转载请以链接形式标明本文地址。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"QGIS","slug":"QGIS","permalink":"https://tanghaojie.github.io/categories/QGIS/"},{"name":"python","slug":"QGIS/python","permalink":"https://tanghaojie.github.io/categories/QGIS/python/"}],"tags":[{"name":"QGIS","slug":"QGIS","permalink":"https://tanghaojie.github.io/tags/QGIS/"},{"name":"python","slug":"python","permalink":"https://tanghaojie.github.io/tags/python/"}],"author":null},{"title":"uniapp快速实践","slug":"fast-uniapp","date":"2020-04-09T17:29:03.000Z","updated":"2020-05-14T03:27:23.107Z","comments":true,"path":"2020/04/10/fast-uniapp/","link":"","permalink":"https://tanghaojie.github.io/2020/04/10/fast-uniapp/","excerpt":"","text":"介绍之前给文保局做了GIS系统和物联网监控系统效果不错，现在想弄个erp，问了一下业务规模，几乎约等于“零”。咋办，单一业务线走到底呗。本来说最近一直在搞flutter，就用flutter给他们弄一个，app和web（beta）一套直接就生成了。方便快速（省事）。结果呢，人家要用微信小程序…哎，甲方是爸爸。结合已有技术经验和业务规模（如果有的话{笑}），还要考虑可能出现的业务平台变更这种吊炸天需求，调研了几个平台，这里我列一下： 1.微信小程序原生：难用的ide，技术栈就是web变种。2.H5+app：原生代码少不了，Android和iOS要单独适配，涉及到兼容性的问题。3.mpvue：美团搞的，基于Vue.js的小程序开发框架，小程序和H5一套搞定型。4.uni-app：Dcloud搞的，也是基于Vue.js的框架，iOS、Android、H5、各种小程序一套搞定型。 对比了一下，微信小程序原生、H5+app，我直接就放弃了，微信小程序那个IDE简直不要太难用，而且改平台就是重写代码；H5+app一个人弄太费事不说，缺少优化可能效果也一般，虽然有原生app的超高天花板，但是谁叫咱就一个人，还要快速出活呢；mpvue本来我是准备选的，小程序+H5，基本上都能干了，后面要改原生app的话，我就套webview的壳，关键是开源免费，怪就怪在开源吧，我上github看了下commits和issues，最近的commit是八个月前了…issues也有点混乱的感觉，加上之前爆出美团的KPI事件，我觉得为了我的KPI和头发，还是算了吧。都说到这了，还有的选吗？最开始我是觉得uniapp商业话太严重（推广），加上不开源，还是有些顾虑的，但是好像现在是（部分）开源了？推广说明官方很重视，那。。还说什么呢，淦 淦因为微信小程序和uniapp都没搞过，花时间分别看了下文档，都是web变种，会web就会开发。主要是熟悉下整体的框架，为啥这样设计，有哪些个组件分别能干啥事，有哪些API。细节千万别看，太花时间，而且你肯定记不住，所以就直接上手吧。uniapp支持Weex，在app端，用vue页面的话就是用webview渲染的，用nvue的话就是用原生渲染。(｡･∀･)ﾉﾞ嗨，等于说码量还是不小啊，坑还是多啊。不过uniapp支持#ifdef #endif条件编译语法，这个没啥好说的，写后端的都知道，赞一个。然后就是写项目了，如果看了微信小程序文档和uniapp的文档，你就会发现，其实就是个web前端的东西，无非就是语法变了一点，配置文件针对多端合并重封装了，写代码的时候要注意兼容，一个ui组件把几个端都同时考虑进来，用条件编译。就行了，就是这么简单，快速实践就介绍完了（其实是不知道说啥了）。（逃） 版权声明：除非注明，本博文章均为原创，转载请以链接形式标明本文地址。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"uniapp","slug":"uniapp","permalink":"https://tanghaojie.github.io/categories/uniapp/"}],"tags":[{"name":"uniapp","slug":"uniapp","permalink":"https://tanghaojie.github.io/tags/uniapp/"},{"name":"微信小程序","slug":"微信小程序","permalink":"https://tanghaojie.github.io/tags/微信小程序/"}],"author":null},{"title":"网页插件","slug":"weatherPlugin","date":"2020-04-03T13:47:44.000Z","updated":"2020-05-14T03:27:23.097Z","comments":true,"path":"2020/04/03/weatherPlugin/","link":"","permalink":"https://tanghaojie.github.io/2020/04/03/weatherPlugin/","excerpt":"","text":"天气中国天气网：https://cj.weather.com.cn/plugin/pc生成插件放到： themes/matery/layout/layout.ejs 动态诗词今日诗词：https://www.jinrishici.com/一言: https://hitokoto.cn/ 版权声明：除非注明，本博文章均为原创，转载请以链接形式标明本文地址。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"plugin","slug":"plugin","permalink":"https://tanghaojie.github.io/categories/plugin/"}],"tags":[{"name":"plugin","slug":"plugin","permalink":"https://tanghaojie.github.io/tags/plugin/"}],"author":null},{"title":"我的博客地址","slug":"myblogaddress","date":"2020-04-03T12:43:56.000Z","updated":"2020-05-14T03:27:23.097Z","comments":true,"path":"2020/04/03/myblogaddress/","link":"","permalink":"https://tanghaojie.github.io/2020/04/03/myblogaddress/","excerpt":"","text":"由于众所周知的原因，单纯把博客部署到一个地方，很可能访问不到，或者访问很慢，所以这里同时部署到github和gitee，提高访问速度 [手动狗头] 前置条件：你会搭博客（网站） 示例 我的两个博客地址： http://tanghaojie.github.io/ https://jackie_tang.gitee.io/ gitee pages的一个坑 每次远程部署以后，需要手动到gitee pages服务里面去，手动点击更新按钮才能自动更新博客。（想自动更新？gitee pages pro了解一下） 从github同步方式部署 在gitee新建仓库: 注意点： 1.仓库名用gitee给你分配的个人地址名，可以到 个人中心–&gt;个人空间地址 中看到，不一定是你的用户名，比如我的地址是：Jackie_Tang，我的用户名是：JackieTang。因为我改过名。。。 2.下面选择导入已有仓库，然后填入github地址以后，仓库名会自动变成github仓库名，所以又需要你自己去上面改一次 点击 创建，等待gitee自动导入github仓库。 导入完成如图配置 注意点： 1.选择使用Https，否则会跨域 以上步骤就完成了，你的博客地址为：{个人地址名}.gitee.io，以后要同步github的数据，只需要这样操作： 同步上传 我用的hexo，在 _config.yml 文件： deploy: type: git repo: github: https://github.com/tanghaojie/tanghaojie.github.io.git gitee: https://gitee.com/Jackie_Tang/Jackie_Tang.git branch: master 加两个repo就好 版权声明：除非注明，本博文章均为原创，转载请以链接形式标明本文地址。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"blog","slug":"blog","permalink":"https://tanghaojie.github.io/categories/blog/"}],"tags":[{"name":"blog","slug":"blog","permalink":"https://tanghaojie.github.io/tags/blog/"}],"author":null},{"title":"中华人民共和国省级行政区域界线标注的小tip","slug":"provincial-boundary","date":"2020-04-01T13:45:29.000Z","updated":"2020-08-14T08:32:36.398Z","comments":true,"path":"2020/04/01/provincial-boundary/","link":"","permalink":"https://tanghaojie.github.io/2020/04/01/provincial-boundary/","excerpt":"","text":"如果大段以河道（或其他水体）为省界的，全部以实线标注会影响河流水体的连续呈现时，则用断续线表示。如晋陕、晋豫黄河省界段，川藏、川滇（东段）长江省界段。 说明我本人没有找到这个规定的出处，是否是国家规范不做保证。但是百度地图现在看已经是这样做标注了。 版权声明：除非注明，本博文章均为原创，转载请以链接形式标明本文地址。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"gis","slug":"gis","permalink":"https://tanghaojie.github.io/categories/gis/"}],"tags":[{"name":"gis","slug":"gis","permalink":"https://tanghaojie.github.io/tags/gis/"}],"author":null},{"title":"flutter定位插件location","slug":"flutter-location","date":"2020-03-31T12:31:11.000Z","updated":"2020-08-14T08:32:48.164Z","comments":true,"path":"2020/03/31/flutter-location/","link":"","permalink":"https://tanghaojie.github.io/2020/03/31/flutter-location/","excerpt":"","text":"iOS没测试，Android需要用到GMS来辅助定位，所以国内不能用！不能用！！不能用！！！ 版权声明：除非注明，本博文章均为原创，转载请以链接形式标明本文地址。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"flutter","slug":"flutter","permalink":"https://tanghaojie.github.io/categories/flutter/"},{"name":"location","slug":"flutter/location","permalink":"https://tanghaojie.github.io/categories/flutter/location/"}],"tags":[{"name":"flutter","slug":"flutter","permalink":"https://tanghaojie.github.io/tags/flutter/"},{"name":"location","slug":"location","permalink":"https://tanghaojie.github.io/tags/location/"},{"name":"定位","slug":"定位","permalink":"https://tanghaojie.github.io/tags/定位/"}],"author":null},{"title":"flutter加载地图的几种方式对比[测试]","slug":"flutter-load-map","date":"2020-03-31T12:14:47.000Z","updated":"2020-08-14T08:32:58.454Z","comments":true,"path":"2020/03/31/flutter-load-map/","link":"","permalink":"https://tanghaojie.github.io/2020/03/31/flutter-load-map/","excerpt":"","text":"1.flutter_map：Leaflet用 Flutter的实现，主要用于加载瓦片地图和简单注记，复杂的几何要素可以用插件的形式，但要自己实现代码。没有自带定位的功能，要自己处理。综合来看，只用瓦片地图，定位这些基础功能的话，可以选这个，团队强大的话，复杂功能也可以自己搞插件。天花板挺高的。 2.webview_flutter：fluter官方出品的webview插件，没什么好说的，网页能干的事他都能干。最大的问题是目前还是预览版，官方说因为用了新的机制，具体什么机制我也没看，能不能实现官方没说，deadline也没说，有点不让人放心。 3.flutter_webview_plugin：网上综合推荐比较多的一个插件了，就是调用native webview，稳定性，兼容性肯定没问题。但是由于接入原生，导致webview始终在最上层，会覆盖在所有 Flutter widget之上，灵活性牺牲很大。最新的说明里写了，要把这个插件合并到上面提到的官方插件里面去了。所以基本上不用选了。 4.其他库：比如说高德amap，百度地图，这类就局限平台了。 目前就测试了这几种地图使用方式，总的来说，有团队，有时间，能自己研发的，可以上。不然的话还是用混合开发吧，flutter还需要给他些时间来成熟。 版权声明：除非注明，本博文章均为原创，转载请以链接形式标明本文地址。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"flutter","slug":"flutter","permalink":"https://tanghaojie.github.io/categories/flutter/"},{"name":"map","slug":"flutter/map","permalink":"https://tanghaojie.github.io/categories/flutter/map/"}],"tags":[{"name":"flutter","slug":"flutter","permalink":"https://tanghaojie.github.io/tags/flutter/"},{"name":"map","slug":"map","permalink":"https://tanghaojie.github.io/tags/map/"},{"name":"webview","slug":"webview","permalink":"https://tanghaojie.github.io/tags/webview/"}],"author":null},{"title":"Flutter Doctor：Android license status unknown","slug":"post","date":"2020-03-27T10:22:12.000Z","updated":"2020-08-14T08:33:16.107Z","comments":true,"path":"2020/03/27/post/","link":"","permalink":"https://tanghaojie.github.io/2020/03/27/post/","excerpt":"","text":"执行： flutter doctor --android-licenses之后一路同意就好了。 如果显示： &gt; Android sdkmanager tool not found (PATH)1.打开Android SDK Manager2.选SDK Tools3.把下面的，Hide Obsolete Packages，取消勾选4.打勾Android SDK Tools (Obsolete)5.确定安装 Flutter团队知道这个问题，官方建议就是这么处理，后续版本会解决的。 版权声明：除非注明，本博文章均为原创，转载请以链接形式标明本文地址。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"flutter","slug":"flutter","permalink":"https://tanghaojie.github.io/categories/flutter/"}],"tags":[{"name":"flutter","slug":"flutter","permalink":"https://tanghaojie.github.io/tags/flutter/"},{"name":"Android","slug":"Android","permalink":"https://tanghaojie.github.io/tags/Android/"},{"name":"iOS","slug":"iOS","permalink":"https://tanghaojie.github.io/tags/iOS/"}],"author":null},{"title":"office2016零售版转VOL版","slug":"office2016ToVol","date":"2020-03-19T11:06:57.000Z","updated":"2020-08-14T08:33:23.990Z","comments":true,"path":"2020/03/19/office2016ToVol/","link":"","permalink":"https://tanghaojie.github.io/2020/03/19/office2016ToVol/","excerpt":"","text":"以下代码复制为：.bat文件 @ECHO OFF&PUSHD %~DP0 setlocal EnableDelayedExpansion&color 3e & cd /d \"%~dp0\" title office2016 retail转换vol版 %1 %2 mshta vbscript:createobject(\"shell.application\").shellexecute(\"%~s0\",\"goto :runas\",\"\",\"runas\",1)(window.close)&goto :eof :runas if exist \"%ProgramFiles%\\Microsoft Office\\Office16\\ospp.vbs\" cd /d \"%ProgramFiles%\\Microsoft Office\\Office16\" if exist \"%ProgramFiles(x86)%\\Microsoft Office\\Office16\\ospp.vbs\" cd /d \"%ProgramFiles(x86)%\\Microsoft Office\\Office16\" :WH cls echo. echo 选择需要转化的office版本序号 echo. echo -------------------------------------------------------------------------------- echo 1. 零售版 Office Pro Plus 2016 转化为VOL版 echo. echo 2. 零售版 Office Visio Pro 2016 转化为VOL版 echo. echo 3. 零售版 Office Project Pro 2016 转化为VOL版 echo. echo. -------------------------------------------------------------------------------- set /p tsk=\"请输入需要转化的office版本序号【回车】确认（1-3）: \" if not defined tsk goto:err if %tsk%==1 goto:1 if %tsk%==2 goto:2 if %tsk%==3 goto:3 :err goto:WH :1 cls echo 正在安装 KMS 许可证... for /f %%x in ('dir /b ..\\root\\Licenses16\\proplusvl_kms*.xrm-ms') do cscript ospp.vbs /inslic:\"..\\root\\Licenses16\\%%x\" >nul echo 正在安装 MAK 许可证... for /f %%x in ('dir /b ..\\root\\Licenses16\\proplusvl_mak*.xrm-ms') do cscript ospp.vbs /inslic:\"..\\root\\Licenses16\\%%x\" >nul set /p y=请输入激活密钥，按回车确定: cscript ospp.vbs /inpkey:%y% goto :e :2 cls echo 正在安装 KMS 许可证... for /f %%x in ('dir /b ..\\root\\Licenses16\\visio???vl_kms*.xrm-ms') do cscript ospp.vbs /inslic:\"..\\root\\Licenses16\\%%x\" >nul echo 正在安装 MAK 许可证... for /f %%x in ('dir /b ..\\root\\Licenses16\\visio???vl_mak*.xrm-ms') do cscript ospp.vbs /inslic:\"..\\root\\Licenses16\\%%x\" >nul set /p y=请输入激活密钥，按回车确定: cscript ospp.vbs /inpkey:%y% goto :e :3 cls echo 正在安装 KMS 许可证... for /f %%x in ('dir /b ..\\root\\Licenses16\\project???vl_kms*.xrm-ms') do cscript ospp.vbs /inslic:\"..\\root\\Licenses16\\%%x\" >nul echo 正在安装 MAK 许可证... for /f %%x in ('dir /b ..\\root\\Licenses16\\project???vl_mak*.xrm-ms') do cscript ospp.vbs /inslic:\"..\\root\\Licenses16\\%%x\" >nul set /p y=请输入激活密钥，按回车确定: cscript ospp.vbs /inpkey:%y% goto :e :e echo. echo 转化完成，按任意键退出！ pause >nul exit 让填写秘钥时，输入 XQNVK-8JYDB-WJ9W3-YJ8YR-WFG99 版权声明：除非注明，本博文章均为原创，转载请以链接形式标明本文地址。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"other","slug":"other","permalink":"https://tanghaojie.github.io/categories/other/"}],"tags":[{"name":"other","slug":"other","permalink":"https://tanghaojie.github.io/tags/other/"}],"author":null},{"title":"vue use video.js support flash rtmp","slug":"vueVideo","date":"2020-03-12T13:06:17.000Z","updated":"2020-08-14T08:33:31.500Z","comments":true,"path":"2020/03/12/vueVideo/","link":"","permalink":"https://tanghaojie.github.io/2020/03/12/vueVideo/","excerpt":"","text":"在Vue中使用video.js，兼容flash视频，研究了一天，简单记录一下。1.包安装 npm install --save videojs npm install --save videojs-flash //如果需要用flash的话 2.实现vue-video.vue文件 &lt;template> &lt;div> &lt;video ref=\"videoPlayer\" class=\"video-js\">&lt;/video> &lt;/div> &lt;/template> &lt;script> import videojs from 'video.js' import 'videojs-flash' // if use flash import SWF_PATH from 'videojs-swf/dist/video-js.swf' // if use flash import 'video.js/dist/video-js.min.css' export default { props: { options: { type: Object, default() { return {} } } }, data() { return { player: null } }, mounted() { this.options.flash = {} // if use flash this.options.flash.swf = SWF_PATH // if use flash this.player = videojs(this.$refs.videoPlayer, this.options) }, beforeDestroy() { if (this.player) { this.player.dispose() } } } &lt;/script> 3.使用 &lt;template> &lt;div id=\"app\"> &lt;vue-video :options=\"videoOptions\" /> &lt;/div> &lt;/template> &lt;script> import vueVideo from './path/to/vue-video.vue' export default { name: 'App', components: { vueVideo }, data() { return { // videoOptions标准参考 https://docs.videojs.com/ videoOptions: { autoplay: true, controls: false, language: 'zh', width: 100, height: 200, sources: [ { src: 'rtmp://*************/live/qq', type: 'rtmp/flv' } ] // techOrder: ['flash'] } } } } &lt;/script> rtmp、mp4已测试没有问题，其他格式就没测试了。需要发布才能进行测试，类似file://C:/test.html这种文件形式的是无法使用的 版权声明：除非注明，本博文章均为原创，转载请以链接形式标明本文地址。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"vue","slug":"vue","permalink":"https://tanghaojie.github.io/categories/vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://tanghaojie.github.io/tags/vue/"},{"name":"video.js","slug":"video-js","permalink":"https://tanghaojie.github.io/tags/video-js/"},{"name":"rtmp","slug":"rtmp","permalink":"https://tanghaojie.github.io/tags/rtmp/"}],"author":null},{"title":"Postgis和EntityFrameworkCore的关系映射，几何字段映射","slug":"entityframeworkcorewithpostgis","date":"2019-12-12T13:02:03.000Z","updated":"2020-08-14T08:33:42.929Z","comments":true,"path":"2019/12/12/entityframeworkcorewithpostgis/","link":"","permalink":"https://tanghaojie.github.io/2019/12/12/entityframeworkcorewithpostgis/","excerpt":"","text":"这篇文章主要讨论Code First模式，其他模式我不怎么用的，不敢保证 现在搞开发数据库操作基本上都用Orm了吧，但是我们搞GIS的，因为涉及到空间几何字段、空间拓扑运算操作的情况，很多时候传统的Orm就解决不了了，所以很多时候要么就直接用odbc原生Sql操作了；或者是业务部分EF+空间几何Sql这么来操作。这两个方案实现起来确实没什么问题，但前者用起来实在麻烦，很多简单的东西就搞复杂了，要么统一封装一下的话就又回到Orm的路子上；后者是最灵活的一种方案了，任何需求都可以用这个办法来解决，但问题就是整个软件的框架会显得很混乱，新人来了经常问为啥要这样搞，思维切换起来很麻烦，如果要改需求还涉及到空间几何的话，那只能打一架好了… 之前的DotnetFramework+Npgsql+EF是不支持使用PostGIS扩展的，官方一直也没明确表态后续规划什么的，直到最近在github上看到开发者说以后应该不会支持了，会把重心放到EF Core上。因此，想要直接映射几何字段几乎变成了不可能的事情。 网上有用SharpMap做映射的解决方案，但是我一直没有测试成功过官方的数据类型映射表里面也写了System.Data.Spatial.DbGeometry可以映射到Geometry类型。这个能在CodeFirst下识别，但生成的字段类型并不是Geometry，而是Byte[]，我也不知道哪错了，诶 直到最近我打算把平台切换到.NetCore，然后去研究了一下，整个人就豁然开朗了啊。1.微软官方明确表态实现几何类型的字段。2.Npgsql的Core版本确实在实现Postgis的东西，而且进度神速。那么，就用呗~ 依赖很简单，就两个包： 1.Npgsql.EntityFrameworkCore.PostgreSQL 2.Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite 然后是配置，首先数据库里面要启用Postgis，简单：Create Extension Postgis;EFCore框架： dbContextOptions.UseNpgsql(connectionString, o => o.UseNetTopologySuite()); //这在哪自己找一下 //这在你的DbContext里面 protected override void OnModelCreating(ModelBuilder builder) { builder.HasPostgresExtension(\"postgis\"); //启用postgis扩展，需要手动写扩展名也是有原因的哦 } 齐活了，就这么简单。使用的话就很简单了： using NetTopologySuite.Geometries; public class TestGeometry{ [Column(TypeName = \"geometry (MultiLineString)\")] //可以指定类型、维度、坐标系 public MultiLineString Geom { get; set; } } 有了这个后续的操作就简单多了： Geom.Area //面积 Geom.AsBinary() //转wkb Geom.AsText() //同ToString()，转wkt ... ... 就不一一列举了，官方文档很全面的。 * 补充一下其他的坑吧，转 .Net Core以后，Gdal会成为一个很大的问题，这个需要好好的评估一下，Gdal目前还没有官方做Core的适配，这个影响挺大的。当然Gdal的功能也有相应各个独立的库能替换的，但始终不会像Gdal这么得心应手，一定要注意评估这一点！！！ * 版权声明：除非注明，本博文章均为原创，转载请以链接形式标明本文地址。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"C#","slug":"C","permalink":"https://tanghaojie.github.io/categories/C/"},{"name":"gis","slug":"C/gis","permalink":"https://tanghaojie.github.io/categories/C/gis/"}],"tags":[{"name":"gis","slug":"gis","permalink":"https://tanghaojie.github.io/tags/gis/"},{"name":"entityframework","slug":"entityframework","permalink":"https://tanghaojie.github.io/tags/entityframework/"},{"name":".net core","slug":"net-core","permalink":"https://tanghaojie.github.io/tags/net-core/"},{"name":"postgis","slug":"postgis","permalink":"https://tanghaojie.github.io/tags/postgis/"}],"author":null},{"title":"网站收录","slug":"website","date":"2019-10-12T08:22:48.000Z","updated":"2020-08-14T08:33:56.759Z","comments":true,"path":"2019/10/12/website/","link":"","permalink":"https://tanghaojie.github.io/2019/10/12/website/","excerpt":"","text":"Google探索实验室 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"website","slug":"website","permalink":"https://tanghaojie.github.io/categories/website/"}],"tags":[{"name":"website","slug":"website","permalink":"https://tanghaojie.github.io/tags/website/"}],"author":null},{"title":"地理信息相关标准","slug":"gisstandard","date":"2019-10-12T07:58:36.000Z","updated":"2020-08-14T08:34:02.311Z","comments":true,"path":"2019/10/12/gisstandard/","link":"","permalink":"https://tanghaojie.github.io/2019/10/12/gisstandard/","excerpt":"","text":"OGC 开放地理空间信息联盟(Open Geospatial Consortium),是一个非盈利的国际标准组织，它制定了数据和服务的一系列标准，GIS厂商按照这个标准进行开发可保证空间数据的互操作。 Spatial reference 坐标系统收录、查询、上传、教育。 GDal GDAL(Geospatial Data Abstraction Library)是一个在X/MIT许可协议下的开源栅格空间数据转换库。它利用抽象数据模型来表达所支持的各种文件格式。它还有一系列命令行工具来进行数据转换和处理。OGR是GDAL项目的一个分支，功能与GDAL类似，只不过它提供对矢量数据的支持。 epsg 全球坐标系统 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"gis","slug":"gis","permalink":"https://tanghaojie.github.io/categories/gis/"},{"name":"tips","slug":"gis/tips","permalink":"https://tanghaojie.github.io/categories/gis/tips/"},{"name":"website","slug":"gis/tips/website","permalink":"https://tanghaojie.github.io/categories/gis/tips/website/"}],"tags":[{"name":"tips","slug":"tips","permalink":"https://tanghaojie.github.io/tags/tips/"},{"name":"gis","slug":"gis","permalink":"https://tanghaojie.github.io/tags/gis/"},{"name":"website","slug":"website","permalink":"https://tanghaojie.github.io/tags/website/"}],"author":null},{"title":"地理地图数据提供网站","slug":"gisdatawebsites","date":"2019-10-12T07:51:21.000Z","updated":"2020-08-14T08:34:07.414Z","comments":true,"path":"2019/10/12/gisdatawebsites/","link":"","permalink":"https://tanghaojie.github.io/2019/10/12/gisdatawebsites/","excerpt":"","text":"OSGeo中国 开放地理空间信息科学：技术、数据、知识共享。 spatial hadoop 一个为空间数据设计的map reduce框架，有很多超大的数据集提供下载。 全国地理信息资源目录服务 国家基础地理信息中心提供的资源查询和下载服务。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"gis","slug":"gis","permalink":"https://tanghaojie.github.io/categories/gis/"},{"name":"tips","slug":"gis/tips","permalink":"https://tanghaojie.github.io/categories/gis/tips/"},{"name":"website","slug":"gis/tips/website","permalink":"https://tanghaojie.github.io/categories/gis/tips/website/"},{"name":"data","slug":"gis/tips/website/data","permalink":"https://tanghaojie.github.io/categories/gis/tips/website/data/"}],"tags":[{"name":"tips","slug":"tips","permalink":"https://tanghaojie.github.io/tags/tips/"},{"name":"gis","slug":"gis","permalink":"https://tanghaojie.github.io/tags/gis/"},{"name":"website","slug":"website","permalink":"https://tanghaojie.github.io/tags/website/"},{"name":"data","slug":"data","permalink":"https://tanghaojie.github.io/tags/data/"}],"author":null},{"title":"一些好玩的地理网站","slug":"gisForFunWebsites","date":"2019-10-12T06:57:09.000Z","updated":"2020-08-14T08:34:04.870Z","comments":true,"path":"2019/10/12/gisForFunWebsites/","link":"","permalink":"https://tanghaojie.github.io/2019/10/12/gisForFunWebsites/","excerpt":"","text":"Open Street Map 人人都可编辑的世界地图，一个网上地图协作计划的产物。 Land Lines Google Creative Lab 提交的一个 Chrome Experiments 项目，基于深度学习。 GeoGuessr 这是一个真实的「情景判断游戏」。开局就是随便把玩家落在 Google 街景中的某一处，你可以在街景地图中一路游走，然后根据周遭信息，判断出身处何处。 The WebGL Globe The WebGL Globe 是一个使数据地理可视化的平台。利用这个项目提供的开源代码，我们可以制作属于自己的数据地球。在项目网站上有不少网友提交的实验，根据人口变化、火山活动、各地维基百科篇目等方方面面的数据产生不同的可视化地球。 Ghost Map Ghost Map收录了各个城市的街道路线，将其隐藏在黑暗中。通过移动鼠标，光亮像细流入川一般流淌到附近街道上，灯火明亮，车水马龙，勾勒出这座城市的建筑与街道规划。当鼠标指针停止移动，万物歇息，一切又沉入黑暗。 SNAZZY MAPS 在线Google Maps配图。自带多种风格自由选择，而且都可以自定义。 Pixel Map 在线像素地图生成。 地图慧 在线地图制作，上传自己的数据，可以做热力图、流向图等等各种专题地图。 stamen 地图与制图、数据可视化。 Map Box 在线地图制图。 Map Stack 使设计地图免费,简单,有趣。 CAD Mapper cad su 等格式的模型下载。 发现中国 中国历史地图、古地图。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"gis","slug":"gis","permalink":"https://tanghaojie.github.io/categories/gis/"},{"name":"tips","slug":"gis/tips","permalink":"https://tanghaojie.github.io/categories/gis/tips/"},{"name":"website","slug":"gis/tips/website","permalink":"https://tanghaojie.github.io/categories/gis/tips/website/"}],"tags":[{"name":"tips","slug":"tips","permalink":"https://tanghaojie.github.io/tags/tips/"},{"name":"fun","slug":"fun","permalink":"https://tanghaojie.github.io/tags/fun/"},{"name":"gis","slug":"gis","permalink":"https://tanghaojie.github.io/tags/gis/"},{"name":"website","slug":"website","permalink":"https://tanghaojie.github.io/tags/website/"}],"author":null}]}